import React, { useMemo, useCallback } from 'react';\nimport { format, addDays, startOfWeek, endOfWeek, eachDayOfInterval, isWeekend, isSameDay } from 'date-fns';\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { cn } from '../../lib/utils';\nimport { ChevronLeft, ChevronRight, Calendar, Clock } from 'lucide-react';\nimport { TimeSlot } from '../../types/allocation';\n\ninterface TimeGridProps {\n  timeSlots: TimeSlot[];\n  viewMode: 'week' | 'month' | 'quarter';\n  selectedDate: Date;\n  onDateChange?: (date: Date) => void;\n  onViewModeChange?: (mode: 'week' | 'month' | 'quarter') => void;\n  className?: string;\n}\n\nexport const TimeGrid: React.FC<TimeGridProps> = ({\n  timeSlots,\n  viewMode,\n  selectedDate,\n  onDateChange,\n  onViewModeChange,\n  className,\n}) => {\n  // Navigate to previous period\n  const navigatePrevious = useCallback(() => {\n    if (!onDateChange) return;\n    \n    let newDate: Date;\n    switch (viewMode) {\n      case 'week':\n        newDate = addDays(selectedDate, -7);\n        break;\n      case 'month':\n        newDate = addDays(selectedDate, -30);\n        break;\n      case 'quarter':\n        newDate = addDays(selectedDate, -90);\n        break;\n      default:\n        newDate = addDays(selectedDate, -7);\n    }\n    onDateChange(newDate);\n  }, [selectedDate, viewMode, onDateChange]);\n\n  // Navigate to next period\n  const navigateNext = useCallback(() => {\n    if (!onDateChange) return;\n    \n    let newDate: Date;\n    switch (viewMode) {\n      case 'week':\n        newDate = addDays(selectedDate, 7);\n        break;\n      case 'month':\n        newDate = addDays(selectedDate, 30);\n        break;\n      case 'quarter':\n        newDate = addDays(selectedDate, 90);\n        break;\n      default:\n        newDate = addDays(selectedDate, 7);\n    }\n    onDateChange(newDate);\n  }, [selectedDate, viewMode, onDateChange]);\n\n  // Go to today\n  const goToToday = useCallback(() => {\n    if (!onDateChange) return;\n    onDateChange(new Date());\n  }, [onDateChange]);\n\n  // Get period label\n  const getPeriodLabel = useMemo(() => {\n    switch (viewMode) {\n      case 'week':\n        const weekStart = startOfWeek(selectedDate);\n        const weekEnd = endOfWeek(selectedDate);\n        return `${format(weekStart, 'MMM d')} - ${format(weekEnd, 'MMM d, yyyy')}`;\n      case 'month':\n        return format(selectedDate, 'MMMM yyyy');\n      case 'quarter':\n        const quarter = Math.floor(selectedDate.getMonth() / 3) + 1;\n        return `Q${quarter} ${format(selectedDate, 'yyyy')}`;\n      default:\n        return format(selectedDate, 'MMMM yyyy');\n    }\n  }, [selectedDate, viewMode]);\n\n  // Group time slots by week for better display in month/quarter view\n  const groupedTimeSlots = useMemo(() => {\n    if (viewMode === 'week') {\n      return [timeSlots];\n    }\n    \n    const groups: TimeSlot[][] = [];\n    let currentGroup: TimeSlot[] = [];\n    \n    timeSlots.forEach((slot, index) => {\n      currentGroup.push(slot);\n      \n      // Check if this is the end of a week (Sunday) or the last slot\n      const slotDate = new Date(slot.date);\n      if (slotDate.getDay() === 0 || index === timeSlots.length - 1) {\n        groups.push([...currentGroup]);\n        currentGroup = [];\n      }\n    });\n    \n    return groups;\n  }, [timeSlots, viewMode]);\n\n  // Get column width based on view mode\n  const getColumnWidth = () => {\n    switch (viewMode) {\n      case 'week': return 'w-32'; // More space for weekly view\n      case 'month': return 'w-24';\n      case 'quarter': return 'w-16';\n      default: return 'w-24';\n    }\n  };\n\n  return (\n    <Card className={cn('p-4', className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-1\">\n            <Button variant=\"outline\" size=\"sm\" onClick={navigatePrevious}>\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={navigateNext}>\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <h2 className=\"text-lg font-semibold\">{getPeriodLabel}</h2>\n          \n          <Button variant=\"outline\" size=\"sm\" onClick={goToToday}>\n            Today\n          </Button>\n        </div>\n\n        {/* View mode selector */}\n        {onViewModeChange && (\n          <div className=\"flex items-center space-x-1\">\n            {(['week', 'month', 'quarter'] as const).map(mode => (\n              <Button\n                key={mode}\n                variant={viewMode === mode ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => onViewModeChange(mode)}\n                className=\"capitalize\"\n              >\n                {mode}\n              </Button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Time grid */}\n      <div className=\"space-y-2\">\n        {groupedTimeSlots.map((weekSlots, weekIndex) => (\n          <div key={weekIndex} className=\"flex gap-1 overflow-x-auto\">\n            {weekSlots.map(slot => {\n              const slotDate = new Date(slot.date);\n              const isToday = isSameDay(slotDate, new Date());\n              const isWeekendDay = isWeekend(slotDate);\n              const utilizationRate = slot.totalCapacity > 0 \n                ? (slot.totalAllocated / slot.totalCapacity) * 100 \n                : 0;\n              \n              return (\n                <div\n                  key={slot.date}\n                  className={cn(\n                    'flex-shrink-0 p-2 border rounded-lg transition-colors',\n                    getColumnWidth(),\n                    isToday && 'border-primary bg-primary/5',\n                    isWeekendDay && 'bg-gray-50',\n                    slot.isHoliday && 'bg-red-50 border-red-200'\n                  )}\n                >\n                  {/* Date header */}\n                  <div className=\"text-center mb-2\">\n                    <div className={cn(\n                      'text-xs font-medium',\n                      isToday && 'text-primary',\n                      isWeekendDay && 'text-muted-foreground'\n                    )}>\n                      {format(slotDate, 'EEE')}\n                    </div>\n                    <div className={cn(\n                      'text-lg font-semibold',\n                      isToday && 'text-primary'\n                    )}>\n                      {format(slotDate, 'd')}\n                    </div>\n                  </div>\n\n                  {/* Capacity indicator */}\n                  {viewMode === 'week' && (\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-muted-foreground\">Capacity</span>\n                        <span>{Math.round(utilizationRate)}%</span>\n                      </div>\n                      \n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div\n                          className={cn(\n                            'h-2 rounded-full transition-all',\n                            utilizationRate > 100 ? 'bg-red-500' :\n                            utilizationRate > 90 ? 'bg-orange-500' :\n                            utilizationRate > 75 ? 'bg-yellow-500' : 'bg-green-500'\n                          )}\n                          style={{ width: `${Math.min(utilizationRate, 100)}%` }}\n                        />\n                      </div>\n                      \n                      <div className=\"text-xs text-center text-muted-foreground\">\n                        {slot.totalAllocated}h / {slot.totalCapacity}h\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Compact view for month/quarter */}\n                  {viewMode !== 'week' && (\n                    <div className=\"text-center\">\n                      {utilizationRate > 0 && (\n                        <div className={cn(\n                          'w-2 h-2 rounded-full mx-auto',\n                          utilizationRate > 100 ? 'bg-red-500' :\n                          utilizationRate > 90 ? 'bg-orange-500' :\n                          utilizationRate > 75 ? 'bg-yellow-500' : 'bg-green-500'\n                        )} />\n                      )}\n                    </div>\n                  )}\n\n                  {/* Holiday indicator */}\n                  {slot.isHoliday && (\n                    <Badge variant=\"outline\" className=\"w-full text-xs justify-center mt-1\">\n                      Holiday\n                    </Badge>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n\n      {/* Legend */}\n      <div className=\"mt-4 pt-4 border-t border-border\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n              <span>Normal (0-75%)</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full\" />\n              <span>High (75-90%)</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full\" />\n              <span>Critical (90-100%)</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full\" />\n              <span>Over-allocated (>100%)</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-1\">\n            <Calendar className=\"h-3 w-3\" />\n            <span>Drag allocations to schedule</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default TimeGrid;"