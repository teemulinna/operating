export const __esModule: boolean;
export const CostCategory: {};
export const BudgetStatus: {};
export const Currency: {};
export class BudgetModel {
    static initialize(pool: any): void;
    static create(input: any): Promise<{
        id: any;
        projectId: any;
        totalBudget: number;
        allocatedBudget: number;
        spentBudget: number;
        committedBudget: number;
        costCategories: any;
        currency: any;
        status: any;
        budgetPeriods: any;
        contingencyPercentage: number;
        approvalWorkflow: any;
        costCenters: any;
        notes: any;
        exchangeRates: any;
        createdAt: any;
        updatedAt: any;
        createdBy: any;
        updatedBy: any;
    }>;
    static findById(id: any): Promise<{
        id: any;
        projectId: any;
        totalBudget: number;
        allocatedBudget: number;
        spentBudget: number;
        committedBudget: number;
        costCategories: any;
        currency: any;
        status: any;
        budgetPeriods: any;
        contingencyPercentage: number;
        approvalWorkflow: any;
        costCenters: any;
        notes: any;
        exchangeRates: any;
        createdAt: any;
        updatedAt: any;
        createdBy: any;
        updatedBy: any;
    } | null>;
    static findByProjectId(projectId: any): Promise<{
        id: any;
        projectId: any;
        totalBudget: number;
        allocatedBudget: number;
        spentBudget: number;
        committedBudget: number;
        costCategories: any;
        currency: any;
        status: any;
        budgetPeriods: any;
        contingencyPercentage: number;
        approvalWorkflow: any;
        costCenters: any;
        notes: any;
        exchangeRates: any;
        createdAt: any;
        updatedAt: any;
        createdBy: any;
        updatedBy: any;
    } | null>;
    static update(id: any, updates: any): Promise<{
        id: any;
        projectId: any;
        totalBudget: number;
        allocatedBudget: number;
        spentBudget: number;
        committedBudget: number;
        costCategories: any;
        currency: any;
        status: any;
        budgetPeriods: any;
        contingencyPercentage: number;
        approvalWorkflow: any;
        costCenters: any;
        notes: any;
        exchangeRates: any;
        createdAt: any;
        updatedAt: any;
        createdBy: any;
        updatedBy: any;
    }>;
    static getRemainingBudget(budget: any): number;
    static getUtilizationPercentage(budget: any): number;
    static getHealthStatus(budget: any): "critical" | "healthy" | "warning";
    static mapRow(row: any): {
        id: any;
        projectId: any;
        totalBudget: number;
        allocatedBudget: number;
        spentBudget: number;
        committedBudget: number;
        costCategories: any;
        currency: any;
        status: any;
        budgetPeriods: any;
        contingencyPercentage: number;
        approvalWorkflow: any;
        costCenters: any;
        notes: any;
        exchangeRates: any;
        createdAt: any;
        updatedAt: any;
        createdBy: any;
        updatedBy: any;
    };
}
export namespace BudgetModel {
    let pool: any;
    let db: any;
}
//# sourceMappingURL=Budget.d.ts.map