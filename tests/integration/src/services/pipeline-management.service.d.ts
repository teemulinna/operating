export const __esModule: boolean;
export class PipelineManagementService {
    db: any;
    createPipelineProject(data: any): Promise<{
        id: string;
        crmId: any;
        crmSource: any;
        name: any;
        description: any;
        clientName: any;
        clientContact: any;
        stage: any;
        priority: any;
        probability: any;
        estimatedValue: number;
        estimatedStartDate: any;
        estimatedDuration: any;
        requiredSkills: any;
        resourceDemand: any;
        competitorInfo: any;
        riskFactors: any;
        notes: any;
        tags: any;
        createdAt: any;
        updatedAt: any;
        lastSyncAt: any;
        syncStatus: any;
        estimatedEndDate: any;
        weightedValue: number;
        resourceCost: number;
        availabilityScore: number;
    }>;
    getPipelineProjects(filters: any): Promise<{
        projects: any;
        total: any;
    }>;
    getPipelineProject(id: any): Promise<{
        id: string;
        crmId: any;
        crmSource: any;
        name: any;
        description: any;
        clientName: any;
        clientContact: any;
        stage: any;
        priority: any;
        probability: any;
        estimatedValue: number;
        estimatedStartDate: any;
        estimatedDuration: any;
        requiredSkills: any;
        resourceDemand: any;
        competitorInfo: any;
        riskFactors: any;
        notes: any;
        tags: any;
        createdAt: any;
        updatedAt: any;
        lastSyncAt: any;
        syncStatus: any;
        estimatedEndDate: any;
        weightedValue: number;
        resourceCost: number;
        availabilityScore: number;
    } | null>;
    updatePipelineProject(id: any, updateData: any): Promise<{
        id: string;
        crmId: any;
        crmSource: any;
        name: any;
        description: any;
        clientName: any;
        clientContact: any;
        stage: any;
        priority: any;
        probability: any;
        estimatedValue: number;
        estimatedStartDate: any;
        estimatedDuration: any;
        requiredSkills: any;
        resourceDemand: any;
        competitorInfo: any;
        riskFactors: any;
        notes: any;
        tags: any;
        createdAt: any;
        updatedAt: any;
        lastSyncAt: any;
        syncStatus: any;
        estimatedEndDate: any;
        weightedValue: number;
        resourceCost: number;
        availabilityScore: number;
    }>;
    deletePipelineProject(id: any): Promise<void>;
    getPipelineAnalytics(filters: any): Promise<{
        totalValue: any;
        weightedValue: any;
        averageProbability: number;
        projectsByStage: any;
        winRate: number;
        averageCycleTime: number;
        topClients: any[];
        conversionRates: never[];
        forecastAccuracy: never[];
        resourceDemandForecast: never[];
        capacityUtilization: never[];
        winLossAnalysis: {
            totalOpportunities: any;
            wonCount: any;
            lostCount: any;
            winRate: number;
            avgDealSize: number;
            avgSalesCycle: number;
            lossReasons: never[];
            competitorAnalysis: never[];
        };
        trends: never[];
    }>;
    mapRowToPipelineProject(row: any): {
        id: string;
        crmId: any;
        crmSource: any;
        name: any;
        description: any;
        clientName: any;
        clientContact: any;
        stage: any;
        priority: any;
        probability: any;
        estimatedValue: number;
        estimatedStartDate: any;
        estimatedDuration: any;
        requiredSkills: any;
        resourceDemand: any;
        competitorInfo: any;
        riskFactors: any;
        notes: any;
        tags: any;
        createdAt: any;
        updatedAt: any;
        lastSyncAt: any;
        syncStatus: any;
        estimatedEndDate: any;
        weightedValue: number;
        resourceCost: number;
        availabilityScore: number;
    };
    getWinLossRates(filters: any): Promise<{
        winRate: number;
        lossRate: number;
        totalDeals: any;
    }>;
    getPipelineHistory(startDate: any, endDate: any): Promise<any>;
    getPipelineMetrics(): Promise<{
        totalProjects: any;
        totalValue: any;
        avgProbability: number;
        stageDistribution: any;
    }>;
    camelToSnake(str: any): any;
}
//# sourceMappingURL=pipeline-management.service.d.ts.map