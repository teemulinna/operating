import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ToastProvider } from './components/ui/toast-provider';
import ErrorBoundary from './components/ui/ErrorBoundary';
import { EmployeeManagement } from './features/employees';
import { AllocationManagement } from './features/allocations/AllocationManagement';
import { ProjectManagement } from './features/projects/ProjectManagement';
import { AllocationsPage } from './components/pages/AllocationsPage';
import { ReportsPage } from './components/pages/ReportsPage';
import { PlanningPage } from './components/pages/PlanningPage';
import { TeamDashboard } from './components/pages/TeamDashboard';
// Weekly Schedule imports
import WeeklyScheduleGrid from './components/schedule/WeeklyScheduleGrid';
import EnhancedSchedulePage from './pages/EnhancedSchedulePage';
import ResourceAllocationForm from './components/allocations/ResourceAllocationForm';
import { apiService } from './services/api';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      refetchOnWindowFocus: false,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});

// Simple Dashboard Component with proper test IDs and real data
function Dashboard() {
  const [stats, setStats] = React.useState({
    employeeCount: 0,
    projectCount: 0,
    utilizationRate: 0,
    allocationCount: 0
  });
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);

  React.useEffect(() => {
    const fetchStats = async () => {
      try {
        setLoading(true);
        setError(null);
        const data = await apiService.getDashboardStats();
        setStats(data);
      } catch (err) {
        console.error('Failed to fetch dashboard stats:', err);
        setError('Failed to load dashboard statistics');
        // Keep showing zeros on error instead of breaking the UI
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" data-testid="dashboard-page">
      <h1 className="text-2xl font-bold text-gray-900 mb-4" data-testid="dashboard-title">Dashboard</h1>
      <p className="text-gray-600" data-testid="dashboard-subtitle">ResourceForge - Intelligent Resource Planning & Capacity Management</p>
      
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6" data-testid="dashboard-error">
          {error}
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8" data-testid="dashboard-stats">
        <div className="bg-white p-6 rounded-lg shadow" data-testid="employees-stat">
          <h3 className="text-lg font-medium text-gray-900">Employees</h3>
          <p className="text-3xl font-bold text-blue-600" data-testid="employees-count">
            {loading ? '...' : stats.employeeCount}
          </p>
          <p className="text-sm text-gray-500">Total team members</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow" data-testid="projects-stat">
          <h3 className="text-lg font-medium text-gray-900">Projects</h3>
          <p className="text-3xl font-bold text-green-600" data-testid="projects-count">
            {loading ? '...' : stats.projectCount}
          </p>
          <p className="text-sm text-gray-500">Active projects</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow" data-testid="utilization-stat">
          <h3 className="text-lg font-medium text-gray-900">Utilization</h3>
          <p className="text-3xl font-bold text-orange-600" data-testid="utilization-percent">
            {loading ? '...' : `${stats.utilizationRate}%`}
          </p>
          <p className="text-sm text-gray-500">Team capacity</p>
        </div>
      </div>
    </div>
  );
}

// Weekly Schedule Page with PRD-compliant grid
function SchedulePage() {
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" data-testid="schedule-page">
      <h1 className="text-2xl font-bold text-gray-900 mb-6" data-testid="schedule-title">Resource Schedule</h1>
      <WeeklyScheduleGrid />
    </div>
  );
}

// Enhanced Schedule Page with over-allocation warnings
function EnhancedSchedulePageWrapper() {
  return <EnhancedSchedulePage />;
}

// Navigation Component with test IDs
function Navigation() {
  return (
    <nav className="bg-white shadow" data-testid="main-navigation">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <h1 className="text-xl font-bold text-gray-900" data-testid="app-title">ResourceForge</h1>
            </div>
            <div className="ml-6 flex space-x-8">
              <a href="/" className="text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-dashboard">
                Dashboard
              </a>
              <a href="/employees" className="text-gray-500 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-employees">
                Employees
              </a>
              <a href="/projects" className="text-gray-500 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-projects">
                Projects
              </a>
              <a href="/allocations" className="text-gray-500 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-allocations">
                Allocations
              </a>
              <a href="/schedule" className="text-gray-500 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-schedule">
                Schedule
              </a>
              <a href="/enhanced-schedule" className="text-gray-500 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-enhanced-schedule">
                Enhanced Schedule
              </a>
              <a href="/reports" className="text-gray-500 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-reports">
                Reports
              </a>
              <a href="/planning" className="text-gray-500 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-planning">
                Planning
              </a>
              <a href="/team-dashboard" className="text-gray-500 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300" data-testid="nav-team-dashboard">
                Team
              </a>
            </div>
          </div>
        </div>
      </div>
    </nav>
  );
}

function App() {
  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <ToastProvider>
          <Router>
            <div className="min-h-screen bg-gray-50" data-testid="app-container">
              <Navigation />
              <main data-testid="main-content">
                <Routes>
                  <Route path="/" element={<Dashboard />} />
                  <Route path="/dashboard" element={<Dashboard />} />
                  <Route path="/employees" element={<EmployeeManagement />} />
                  <Route path="/projects" element={<ProjectManagement />} />
                  <Route path="/allocations" element={<AllocationManagement />} />
                  <Route path="/schedule" element={<SchedulePage />} />
                  <Route path="/enhanced-schedule" element={<EnhancedSchedulePageWrapper />} />
                  <Route path="/reports" element={<ReportsPage />} />
                  <Route path="/planning" element={<PlanningPage />} />
                  <Route path="/team-dashboard" element={<TeamDashboard />} />
                  <Route path="/allocations/new" element={
                    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                      <ResourceAllocationForm onSubmit={() => console.log('Allocation created')} />
                    </div>
                  } />
                  <Route path="*" element={<Navigate to="/" />} />
                </Routes>
              </main>
            </div>
          </Router>
        </ToastProvider>
      </QueryClientProvider>
    </ErrorBoundary>
  );
}

export default App;