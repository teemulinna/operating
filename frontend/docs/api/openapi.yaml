openapi: 3.0.3
info:
  title: Employee Management System API
  description: |
    A comprehensive REST API for managing employee data with authentication,
    role-based access control, and full CRUD operations.
  version: 1.0.0
  contact:
    name: API Support
    email: support@company.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.company.com/api
    description: Production server

security:
  - bearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the health status of the API
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  example: "user@company.com"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123!"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                role:
                  type: string
                  enum: [admin, manager, employee]
                  default: employee
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user
      description: Logs in a user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials
        '429':
          description: Too many login attempts

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Returns the currently authenticated user's information
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /employees:
    get:
      tags:
        - Employees
      summary: List all employees
      description: Returns a paginated list of all employees
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: search
          schema:
            type: string
          description: Search by name, email, or position
        - in: query
          name: department
          schema:
            type: string
          description: Filter by department
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [firstName, lastName, email, position, department, salary, createdAt]
            default: firstName
        - in: query
          name: order
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
      responses:
        '200':
          description: List of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  employees:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized

    post:
      tags:
        - Employees
      summary: Create a new employee
      description: Creates a new employee record
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeInput'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Validation error
        '403':
          description: Insufficient permissions

  /employees/{id}:
    get:
      tags:
        - Employees
      summary: Get employee by ID
      description: Returns a specific employee by their ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Employee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found

    put:
      tags:
        - Employees
      summary: Update employee
      description: Updates an existing employee record
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeInput'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Validation error
        '404':
          description: Employee not found
        '403':
          description: Insufficient permissions

    delete:
      tags:
        - Employees
      summary: Delete employee
      description: Deletes an employee record
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Employee deleted successfully
        '404':
          description: Employee not found
        '403':
          description: Insufficient permissions

  /employees/search:
    get:
      tags:
        - Employees
      summary: Advanced employee search
      description: Advanced search with multiple filters and sorting options
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: General search term
        - in: query
          name: departments
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          description: Filter by multiple departments
        - in: query
          name: positions
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          description: Filter by multiple positions
        - in: query
          name: minSalary
          schema:
            type: number
        - in: query
          name: maxSalary
          schema:
            type: number
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  employees:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  total:
                    type: integer
                  filters:
                    type: object

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "admin@company.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [admin, manager, employee]
          example: "admin"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Employee:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: "Jane"
        lastName:
          type: string
          example: "Smith"
        email:
          type: string
          format: email
          example: "jane.smith@company.com"
        position:
          type: string
          example: "Software Developer"
        department:
          type: string
          example: "Engineering"
        salary:
          type: number
          format: float
          example: 75000.00
        hireDate:
          type: string
          format: date
          example: "2024-01-15"
        phone:
          type: string
          example: "+1-555-123-4567"
        address:
          type: string
          example: "123 Main St, City, State 12345"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EmployeeInput:
      type: object
      required:
        - firstName
        - lastName
        - email
        - position
        - department
        - salary
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
        position:
          type: string
          minLength: 1
          maxLength: 100
        department:
          type: string
          minLength: 1
          maxLength: 50
        salary:
          type: number
          format: float
          minimum: 0
        hireDate:
          type: string
          format: date
        phone:
          type: string
          pattern: '^[+]?[1-9][\d\s\-\(\)]{7,15}$'
        address:
          type: string
          maxLength: 255

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email is required"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        error:
          type: string
          example: "An error occurred"
        message:
          type: string
          example: "Detailed error message"
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: "/api/employees"

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ValidationError:
      description: Input validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Employees
    description: Employee management operations
  - name: Health
    description: System health and monitoring