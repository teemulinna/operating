/**
 * Mobile Responsiveness and Touch Interactions E2E Tests
 * Tests mobile-first design, responsive layouts, and touch gestures
 */
import { test, expect, devices } from '@playwright/test';
import { test as base, VIEWPORTS } from '@playwright/test

const { test: enhancedTest, expect: enhancedExpect } = base;

// Mobile device configurations for testing
const mobileDevices = [
  { name: 'iPhone 12', ...devices['iPhone 12'] },
  { name: 'iPhone 13 Pro', ...devices['iPhone 13 Pro'] },
  { name: 'Pixel 5', ...devices['Pixel 5'] },
  { name: 'Samsung Galaxy S21', ...devices['Galaxy S21'] },
  { name: 'iPad Pro', ...devices['iPad Pro'] },
  { name: 'iPad', ...devices['iPad (gen 7)'] }
];

enhancedTest.describe('Mobile Responsiveness and Touch Interactions', () => {
  
  enhancedTest.describe('Responsive Layout Testing', () => {
    
    mobileDevices.forEach(device => {
      enhancedTest(`should display correctly on ${device.name}`, async ({ page, testHelpers }) => {
        // Set device viewport
        await page.setViewportSize({ 
          width: device.viewport?.width || 375, 
          height: device.viewport?.height || 667 
        });\n        \n        // Set user agent if provided\n        if (device.userAgent) {\n          await page.setExtraHTTPHeaders({\n            'User-Agent': device.userAgent\n          });\n        }\n        \n        // Navigate to dashboard\n        await page.goto('/dashboard');\n        await testHelpers.waitForElement('[data-testid=\"main-dashboard\"]');\n        \n        // Verify mobile-specific navigation\n        if (device.viewport && device.viewport.width < 768) {\n          // Mobile navigation\n          await expect(page.locator('[data-testid=\"mobile-menu-trigger\"]')).toBeVisible();\n          await expect(page.locator('[data-testid=\"desktop-sidebar\"]')).not.toBeVisible();\n          \n          // Test mobile menu functionality\n          await page.click('[data-testid=\"mobile-menu-trigger\"]');\n          await testHelpers.waitForElement('[data-testid=\"mobile-navigation\"]');\n          await expect(page.locator('[data-testid=\"nav-projects\"]')).toBeVisible();\n          await expect(page.locator('[data-testid=\"nav-resources\"]')).toBeVisible();\n          \n          // Test menu close\n          await page.click('[data-testid=\"close-mobile-menu\"]');\n          await expect(page.locator('[data-testid=\"mobile-navigation\"]')).not.toBeVisible();\n          \n        } else if (device.viewport && device.viewport.width < 1024) {\n          // Tablet navigation\n          await expect(page.locator('[data-testid=\"tablet-sidebar\"]')).toBeVisible();\n          await expect(page.locator('[data-testid=\"collapsed-nav\"]')).toBeVisible();\n        }\n        \n        // Verify responsive dashboard layout\n        const dashboardGrid = page.locator('[data-testid=\"dashboard-widgets\"]');\n        const gridStyles = await dashboardGrid.evaluate(el => {\n          const styles = window.getComputedStyle(el);\n          return {\n            display: styles.display,\n            gridTemplateColumns: styles.gridTemplateColumns,\n            flexDirection: styles.flexDirection\n          };\n        });\n        \n        // Verify appropriate layout for screen size\n        if (device.viewport && device.viewport.width < 768) {\n          // Mobile: should stack widgets vertically\n          expect(gridStyles.gridTemplateColumns).toBe('1fr');\n        } else if (device.viewport && device.viewport.width < 1024) {\n          // Tablet: should use 2-column grid\n          expect(gridStyles.gridTemplateColumns).toContain('1fr 1fr');\n        }\n        \n        // Test responsive text and spacing\n        const headerText = page.locator('[data-testid=\"dashboard-title\"]');\n        const fontSize = await headerText.evaluate(el => {\n          return window.getComputedStyle(el).fontSize;\n        });\n        \n        // Mobile should have smaller font sizes\n        if (device.viewport && device.viewport.width < 768) {\n          const fontSizeNum = parseFloat(fontSize);\n          expect(fontSizeNum).toBeLessThan(32); // Should be smaller than desktop\n        }\n        \n        // Test touch-friendly button sizes\n        const buttons = page.locator('[data-testid*=\"button\"], button');\n        const buttonCount = await buttons.count();\n        \n        for (let i = 0; i < Math.min(buttonCount, 5); i++) {\n          const button = buttons.nth(i);\n          if (await button.isVisible()) {\n            const buttonBox = await button.boundingBox();\n            if (buttonBox) {\n              // Minimum touch target size should be 44px\n              expect(buttonBox.height).toBeGreaterThanOrEqual(44);\n              if (buttonBox.width > 0) {\n                expect(buttonBox.width).toBeGreaterThanOrEqual(44);\n              }\n            }\n          }\n        }\n        \n        // Take device-specific screenshot\n        await page.screenshot({\n          path: `test-results/responsive-${device.name.toLowerCase().replace(/\\s+/g, '-')}-dashboard.png`,\n          fullPage: true\n        });\n        \n        // Test scrolling behavior\n        await page.mouse.wheel(0, 500);\n        await page.waitForTimeout(500);\n        \n        // Verify scroll position changed\n        const scrollY = await page.evaluate(() => window.scrollY);\n        expect(scrollY).toBeGreaterThan(0);\n        \n        // Test horizontal scrolling prevention\n        const bodyWidth = await page.evaluate(() => {\n          return {\n            scrollWidth: document.body.scrollWidth,\n            clientWidth: document.body.clientWidth\n          };\n        });\n        \n        // Should not have horizontal scroll\n        expect(bodyWidth.scrollWidth).toBeLessThanOrEqual(bodyWidth.clientWidth + 5); // 5px tolerance\n      });\n    });\n    \n    enhancedTest('should handle orientation changes', async ({ page, testHelpers }) => {\n      // Start in portrait mode\n      await page.setViewportSize({ width: 375, height: 812 });\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Take portrait screenshot\n      await page.screenshot({\n        path: 'test-results/orientation-portrait.png',\n        fullPage: true\n      });\n      \n      // Verify portrait layout\n      const portraitGrid = await page.locator('[data-testid=\"projects-grid\"]').evaluate(el => {\n        return window.getComputedStyle(el).gridTemplateColumns;\n      });\n      \n      // Switch to landscape mode\n      await page.setViewportSize({ width: 812, height: 375 });\n      await page.waitForTimeout(500); // Allow for layout adjustment\n      \n      // Take landscape screenshot\n      await page.screenshot({\n        path: 'test-results/orientation-landscape.png',\n        fullPage: true\n      });\n      \n      // Verify landscape layout adapted\n      const landscapeGrid = await page.locator('[data-testid=\"projects-grid\"]').evaluate(el => {\n        return window.getComputedStyle(el).gridTemplateColumns;\n      });\n      \n      // Layouts should be different\n      expect(landscapeGrid).not.toBe(portraitGrid);\n      \n      // Test navigation bar in landscape\n      if (await page.locator('[data-testid=\"landscape-nav\"]').isVisible()) {\n        await expect(page.locator('[data-testid=\"landscape-nav\"]')).toBeVisible();\n      }\n    });\n  });\n\n  enhancedTest.describe('Touch Gesture Testing', () => {\n    \n    enhancedTest.beforeEach(async ({ page }) => {\n      // Set mobile viewport for touch testing\n      await page.setViewportSize(VIEWPORTS.MOBILE);\n    });\n\n    enhancedTest('should handle tap gestures correctly', async ({ page, testHelpers }) => {\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Test single tap\n      const projectCard = page.locator('[data-testid=\"project-card\"]').first();\n      await projectCard.tap();\n      \n      // Verify tap navigation\n      await testHelpers.waitForElement('[data-testid=\"project-detail-mobile\"]');\n      \n      // Test double tap to zoom (if supported)\n      const chartArea = page.locator('[data-testid=\"project-chart\"]');\n      if (await chartArea.isVisible()) {\n        // Simulate double tap\n        await chartArea.tap();\n        await page.waitForTimeout(100);\n        await chartArea.tap();\n        \n        // Check if zoom was applied\n        const zoomLevel = await chartArea.getAttribute('data-zoom-level');\n        if (zoomLevel) {\n          expect(parseFloat(zoomLevel)).toBeGreaterThan(1);\n        }\n      }\n      \n      // Test tap and hold for context menu\n      const contextTarget = page.locator('[data-testid=\"project-title\"]');\n      await contextTarget.tap({ timeout: 1000 }); // Long press simulation\n      \n      // Check for context menu appearance\n      const contextMenu = page.locator('[data-testid=\"context-menu\"]');\n      if (await contextMenu.isVisible({ timeout: 2000 })) {\n        await expect(contextMenu).toBeVisible();\n        \n        // Dismiss context menu\n        await page.tap('body', { position: { x: 50, y: 50 } });\n        await expect(contextMenu).not.toBeVisible();\n      }\n    });\n\n    enhancedTest('should handle swipe gestures', async ({ page, testHelpers }) => {\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Test horizontal swipe on project cards\n      const swipeableCard = page.locator('[data-testid=\"swipeable-project-card\"]').first();\n      \n      if (await swipeableCard.isVisible()) {\n        const cardBox = await swipeableCard.boundingBox();\n        if (cardBox) {\n          // Swipe left to reveal actions\n          await page.mouse.move(cardBox.x + cardBox.width - 10, cardBox.y + cardBox.height / 2);\n          await page.mouse.down();\n          await page.mouse.move(cardBox.x + 10, cardBox.y + cardBox.height / 2);\n          await page.mouse.up();\n          \n          // Verify swipe actions are revealed\n          await testHelpers.waitForElement('[data-testid=\"swipe-actions\"]');\n          await expect(page.locator('[data-testid=\"edit-action\"]')).toBeVisible();\n          await expect(page.locator('[data-testid=\"delete-action\"]')).toBeVisible();\n          \n          // Swipe right to hide actions\n          await page.mouse.move(cardBox.x + 10, cardBox.y + cardBox.height / 2);\n          await page.mouse.down();\n          await page.mouse.move(cardBox.x + cardBox.width - 10, cardBox.y + cardBox.height / 2);\n          await page.mouse.up();\n          \n          // Actions should be hidden\n          await expect(page.locator('[data-testid=\"swipe-actions\"]')).not.toBeVisible();\n        }\n      }\n      \n      // Test pull-to-refresh gesture\n      await page.mouse.move(200, 100);\n      await page.mouse.down();\n      await page.mouse.move(200, 250); // Pull down\n      await page.mouse.up();\n      \n      // Verify refresh indicator appears\n      const refreshIndicator = page.locator('[data-testid=\"pull-refresh-indicator\"]');\n      if (await refreshIndicator.isVisible({ timeout: 2000 })) {\n        await expect(refreshIndicator).toBeVisible();\n        \n        // Wait for refresh to complete\n        await expect(refreshIndicator).not.toBeVisible({ timeout: 5000 });\n      }\n      \n      // Test swipe navigation between tabs\n      await page.goto('/dashboard');\n      await testHelpers.waitForElement('[data-testid=\"main-dashboard\"]');\n      \n      if (await page.locator('[data-testid=\"swipeable-tabs\"]').isVisible()) {\n        const tabContainer = page.locator('[data-testid=\"swipeable-tabs\"]');\n        const containerBox = await tabContainer.boundingBox();\n        \n        if (containerBox) {\n          // Swipe left to next tab\n          await page.mouse.move(containerBox.x + containerBox.width - 10, containerBox.y + containerBox.height / 2);\n          await page.mouse.down();\n          await page.mouse.move(containerBox.x + 10, containerBox.y + containerBox.height / 2);\n          await page.mouse.up();\n          \n          // Verify tab changed\n          await page.waitForTimeout(500);\n          const activeTab = page.locator('[data-testid=\"active-tab\"]');\n          const tabText = await activeTab.textContent();\n          expect(tabText).not.toBe('Dashboard'); // Should have changed from first tab\n        }\n      }\n    });\n\n    enhancedTest('should handle pinch and zoom gestures', async ({ page, testHelpers }) => {\n      await page.goto('/analytics');\n      await testHelpers.waitForElement('[data-testid=\"analytics-page\"]');\n      \n      // Find zoomable chart\n      const zoomableChart = page.locator('[data-testid=\"zoomable-chart\"]');\n      \n      if (await zoomableChart.isVisible()) {\n        // Simulate pinch to zoom in\n        const chartBox = await zoomableChart.boundingBox();\n        if (chartBox) {\n          const centerX = chartBox.x + chartBox.width / 2;\n          const centerY = chartBox.y + chartBox.height / 2;\n          \n          // Simulate two-finger pinch gesture\n          // Note: This is a simplified simulation - real pinch gestures are complex\n          await page.evaluate((selector) => {\n            const element = document.querySelector(selector);\n            if (element) {\n              // Simulate wheel event with ctrl key (pinch zoom simulation)\n              const event = new WheelEvent('wheel', {\n                deltaY: -100,\n                ctrlKey: true,\n                bubbles: true\n              });\n              element.dispatchEvent(event);\n            }\n          }, '[data-testid=\"zoomable-chart\"]');\n          \n          // Verify zoom level increased\n          await page.waitForTimeout(500);\n          const zoomLevel = await zoomableChart.getAttribute('data-zoom-level');\n          if (zoomLevel) {\n            expect(parseFloat(zoomLevel)).toBeGreaterThan(1);\n          }\n          \n          // Simulate pinch to zoom out\n          await page.evaluate((selector) => {\n            const element = document.querySelector(selector);\n            if (element) {\n              const event = new WheelEvent('wheel', {\n                deltaY: 100,\n                ctrlKey: true,\n                bubbles: true\n              });\n              element.dispatchEvent(event);\n            }\n          }, '[data-testid=\"zoomable-chart\"]');\n          \n          // Verify zoom level decreased\n          await page.waitForTimeout(500);\n          const newZoomLevel = await zoomableChart.getAttribute('data-zoom-level');\n          if (newZoomLevel && zoomLevel) {\n            expect(parseFloat(newZoomLevel)).toBeLessThan(parseFloat(zoomLevel));\n          }\n        }\n      }\n      \n      // Test map pinch zoom (if map component exists)\n      const mapComponent = page.locator('[data-testid=\"interactive-map\"]');\n      if (await mapComponent.isVisible()) {\n        // Test map zoom functionality\n        await page.evaluate(() => {\n          const mapEl = document.querySelector('[data-testid=\"interactive-map\"]');\n          if (mapEl) {\n            // Simulate map zoom events\n            const zoomEvent = new CustomEvent('zoom', {\n              detail: { scale: 1.5, centerX: 200, centerY: 200 }\n            });\n            mapEl.dispatchEvent(zoomEvent);\n          }\n        });\n        \n        // Verify map responded to zoom\n        const mapZoomLevel = await mapComponent.getAttribute('data-zoom');\n        if (mapZoomLevel) {\n          expect(parseFloat(mapZoomLevel)).toBeGreaterThan(1);\n        }\n      }\n    });\n\n    enhancedTest('should handle multi-touch gestures', async ({ page, testHelpers }) => {\n      await page.goto('/resource-planning');\n      await testHelpers.waitForElement('[data-testid=\"resource-planning-page\"]');\n      \n      // Switch to touch-friendly kanban view\n      if (await page.locator('[data-testid=\"kanban-view-toggle\"]').isVisible()) {\n        await page.click('[data-testid=\"kanban-view-toggle\"]');\n        await testHelpers.waitForElement('[data-testid=\"kanban-board\"]');\n      }\n      \n      // Test multi-select with touch\n      const selectableItems = page.locator('[data-testid*=\"employee-card\"]');\n      const itemCount = Math.min(await selectableItems.count(), 3);\n      \n      // Simulate multi-touch selection\n      for (let i = 0; i < itemCount; i++) {\n        const item = selectableItems.nth(i);\n        if (await item.isVisible()) {\n          // Long press to enter selection mode\n          await item.tap({ timeout: 1000 });\n          await page.waitForTimeout(200);\n        }\n      }\n      \n      // Verify multi-selection state\n      const selectedItems = page.locator('[data-testid*=\"employee-card\"][data-selected=\"true\"]');\n      const selectedCount = await selectedItems.count();\n      \n      if (selectedCount > 0) {\n        // Test multi-touch drag and drop\n        const firstSelected = selectedItems.first();\n        const dropTarget = page.locator('[data-testid=\"drop-zone\"]');\n        \n        if (await dropTarget.isVisible()) {\n          const sourceBox = await firstSelected.boundingBox();\n          const targetBox = await dropTarget.boundingBox();\n          \n          if (sourceBox && targetBox) {\n            // Simulate drag with multiple selected items\n            await page.mouse.move(sourceBox.x + sourceBox.width / 2, sourceBox.y + sourceBox.height / 2);\n            await page.mouse.down();\n            await page.mouse.move(targetBox.x + targetBox.width / 2, targetBox.y + targetBox.height / 2);\n            await page.mouse.up();\n            \n            // Verify all selected items were moved\n            await page.waitForTimeout(1000);\n            const movedItems = page.locator('[data-testid=\"drop-zone\"] [data-testid*=\"employee-card\"]');\n            const movedCount = await movedItems.count();\n            expect(movedCount).toBe(selectedCount);\n          }\n        }\n      }\n      \n      // Test rotation gesture (if supported)\n      const rotatableElement = page.locator('[data-testid=\"rotatable-view\"]');\n      if (await rotatableElement.isVisible()) {\n        // Simulate rotation gesture (simplified)\n        await page.evaluate(() => {\n          const element = document.querySelector('[data-testid=\"rotatable-view\"]');\n          if (element) {\n            const rotateEvent = new CustomEvent('rotate', {\n              detail: { rotation: 45 }\n            });\n            element.dispatchEvent(rotateEvent);\n          }\n        });\n        \n        // Verify rotation was applied\n        const rotation = await rotatableElement.evaluate(el => {\n          const transform = window.getComputedStyle(el).transform;\n          return transform !== 'none';\n        });\n        expect(rotation).toBeTruthy();\n      }\n    });\n  });\n\n  enhancedTest.describe('Mobile-Specific UI Components', () => {\n    \n    enhancedTest('should handle mobile navigation patterns', async ({ page, testHelpers }) => {\n      await page.setViewportSize(VIEWPORTS.MOBILE);\n      await page.goto('/');\n      await testHelpers.waitForElement('[data-testid=\"app-root\"]');\n      \n      // Test bottom navigation (if present)\n      const bottomNav = page.locator('[data-testid=\"bottom-navigation\"]');\n      if (await bottomNav.isVisible()) {\n        // Test bottom nav items\n        const navItems = bottomNav.locator('[data-testid*=\"nav-item\"]');\n        const itemCount = await navItems.count();\n        \n        expect(itemCount).toBeGreaterThan(0);\n        expect(itemCount).toBeLessThanOrEqual(5); // Standard bottom nav limit\n        \n        // Test navigation between sections\n        for (let i = 0; i < itemCount; i++) {\n          const navItem = navItems.nth(i);\n          await navItem.tap();\n          await page.waitForTimeout(500);\n          \n          // Verify navigation occurred\n          const activeItem = bottomNav.locator('[data-testid*=\"nav-item\"][data-active=\"true\"]');\n          expect(await activeItem.count()).toBe(1);\n        }\n      }\n      \n      // Test hamburger menu\n      const hamburgerMenu = page.locator('[data-testid=\"mobile-menu-trigger\"]');\n      if (await hamburgerMenu.isVisible()) {\n        await hamburgerMenu.tap();\n        \n        // Verify slide-out navigation\n        const slideOutNav = page.locator('[data-testid=\"slide-out-navigation\"]');\n        await expect(slideOutNav).toBeVisible();\n        \n        // Test navigation animation\n        const navTransform = await slideOutNav.evaluate(el => {\n          return window.getComputedStyle(el).transform;\n        });\n        expect(navTransform).not.toBe('none');\n        \n        // Test backdrop tap to close\n        await page.tap('[data-testid=\"nav-backdrop\"]');\n        await expect(slideOutNav).not.toBeVisible();\n      }\n      \n      // Test tab navigation\n      const tabNavigation = page.locator('[data-testid=\"tab-navigation\"]');\n      if (await tabNavigation.isVisible()) {\n        const tabs = tabNavigation.locator('[data-testid*=\"tab\"]');\n        const tabCount = await tabs.count();\n        \n        // Test swipe between tabs\n        const tabContainer = page.locator('[data-testid=\"tab-content\"]');\n        const containerBox = await tabContainer.boundingBox();\n        \n        if (containerBox) {\n          // Swipe to next tab\n          await page.mouse.move(containerBox.x + containerBox.width - 10, containerBox.y + containerBox.height / 2);\n          await page.mouse.down();\n          await page.mouse.move(containerBox.x + 10, containerBox.y + containerBox.height / 2);\n          await page.mouse.up();\n          \n          // Verify tab indicator moved\n          const activeTab = tabNavigation.locator('[data-testid*=\"tab\"][data-active=\"true\"]');\n          const activeIndex = await activeTab.getAttribute('data-index');\n          expect(activeIndex).toBe('1'); // Should be second tab\n        }\n      }\n    });\n\n    enhancedTest('should handle mobile form interactions', async ({ page, testHelpers }) => {\n      await page.setViewportSize(VIEWPORTS.MOBILE);\n      await page.goto('/projects/create');\n      await testHelpers.waitForElement('[data-testid=\"mobile-project-form\"]');\n      \n      // Test virtual keyboard behavior\n      const textInput = page.locator('[data-testid=\"project-name\"]');\n      await textInput.tap();\n      \n      // Verify input focused and keyboard would appear\n      const isFocused = await textInput.evaluate(el => document.activeElement === el);\n      expect(isFocused).toBeTruthy();\n      \n      // Test input with virtual keyboard considerations\n      await textInput.fill('Mobile Test Project');\n      \n      // Test date picker on mobile\n      const datePicker = page.locator('[data-testid=\"start-date\"]');\n      await datePicker.tap();\n      \n      // Mobile date picker should appear\n      const mobileDatePicker = page.locator('[data-testid=\"mobile-date-picker\"]');\n      if (await mobileDatePicker.isVisible({ timeout: 2000 })) {\n        // Test date selection\n        await page.tap('[data-testid=\"date-15\"]');\n        await page.tap('[data-testid=\"date-picker-confirm\"]');\n        \n        // Verify date was set\n        const dateValue = await datePicker.inputValue();\n        expect(dateValue).toContain('15');\n      }\n      \n      // Test select dropdown on mobile\n      const selectDropdown = page.locator('[data-testid=\"project-status\"]');\n      await selectDropdown.tap();\n      \n      // Mobile select should show as bottom sheet or native picker\n      const mobileSelect = page.locator('[data-testid=\"mobile-select-options\"]');\n      if (await mobileSelect.isVisible({ timeout: 2000 })) {\n        await page.tap('[data-testid=\"option-active\"]');\n        \n        // Verify selection\n        const selectedValue = await selectDropdown.inputValue();\n        expect(selectedValue).toBe('active');\n      }\n      \n      // Test file upload on mobile\n      const fileUpload = page.locator('[data-testid=\"file-upload\"]');\n      await fileUpload.tap();\n      \n      // Mobile file picker simulation\n      await fileUpload.setInputFiles({\n        name: 'mobile-test.jpg',\n        mimeType: 'image/jpeg',\n        buffer: Buffer.from('fake image')\n      });\n      \n      // Verify file upload preview\n      const filePreview = page.locator('[data-testid=\"file-preview\"]');\n      await expect(filePreview).toBeVisible();\n      \n      // Test form submission with mobile considerations\n      await page.tap('[data-testid=\"submit-project\"]');\n      \n      // Handle potential keyboard dismissal\n      await page.keyboard.press('Escape');\n      \n      // Verify form submission\n      await testHelpers.verifyToast('Project created successfully');\n    });\n\n    enhancedTest('should handle mobile-specific interactions', async ({ page, testHelpers }) => {\n      await page.setViewportSize(VIEWPORTS.MOBILE);\n      await page.goto('/dashboard');\n      await testHelpers.waitForElement('[data-testid=\"main-dashboard\"]');\n      \n      // Test infinite scroll\n      const scrollableList = page.locator('[data-testid=\"scrollable-list\"]');\n      if (await scrollableList.isVisible()) {\n        let previousItemCount = await scrollableList.locator('[data-testid*=\"list-item\"]').count();\n        \n        // Scroll to bottom\n        await scrollableList.evaluate(el => {\n          el.scrollTop = el.scrollHeight;\n        });\n        \n        // Wait for new items to load\n        await page.waitForTimeout(2000);\n        \n        const newItemCount = await scrollableList.locator('[data-testid*=\"list-item\"]').count();\n        \n        if (newItemCount > previousItemCount) {\n          expect(newItemCount).toBeGreaterThan(previousItemCount);\n        }\n      }\n      \n      // Test floating action button\n      const fab = page.locator('[data-testid=\"floating-action-button\"]');\n      if (await fab.isVisible()) {\n        // Test FAB visibility on scroll\n        await page.mouse.wheel(0, 300);\n        \n        // FAB might hide on scroll\n        const fabVisible = await fab.isVisible();\n        \n        // Scroll back up\n        await page.mouse.wheel(0, -300);\n        \n        // FAB should be visible again\n        await expect(fab).toBeVisible();\n        \n        // Test FAB tap\n        await fab.tap();\n        \n        // Verify FAB action (e.g., show menu or navigate)\n        const fabMenu = page.locator('[data-testid=\"fab-menu\"]');\n        if (await fabMenu.isVisible({ timeout: 1000 })) {\n          await expect(fabMenu).toBeVisible();\n          \n          // Test menu option\n          const menuOption = fabMenu.locator('[data-testid=\"fab-option\"]').first();\n          await menuOption.tap();\n        }\n      }\n      \n      // Test card stack interactions\n      const cardStack = page.locator('[data-testid=\"card-stack\"]');\n      if (await cardStack.isVisible()) {\n        const cards = cardStack.locator('[data-testid*=\"swipeable-card\"]');\n        const cardCount = await cards.count();\n        \n        if (cardCount > 0) {\n          const topCard = cards.first();\n          const cardBox = await topCard.boundingBox();\n          \n          if (cardBox) {\n            // Swipe card away\n            await page.mouse.move(cardBox.x + cardBox.width / 2, cardBox.y + cardBox.height / 2);\n            await page.mouse.down();\n            await page.mouse.move(cardBox.x + cardBox.width + 100, cardBox.y + cardBox.height / 2);\n            await page.mouse.up();\n            \n            // Verify card was swiped away\n            await page.waitForTimeout(1000);\n            const remainingCards = await cardStack.locator('[data-testid*=\"swipeable-card\"]:visible').count();\n            expect(remainingCards).toBe(cardCount - 1);\n          }\n        }\n      }\n      \n      // Test haptic feedback simulation\n      const hapticButton = page.locator('[data-testid=\"haptic-feedback-button\"]');\n      if (await hapticButton.isVisible()) {\n        await hapticButton.tap();\n        \n        // Verify haptic feedback was triggered (via DOM attribute)\n        const hapticTriggered = await hapticButton.getAttribute('data-haptic-triggered');\n        expect(hapticTriggered).toBe('true');\n      }\n    });\n  });\n\n  enhancedTest.describe('Mobile Performance Testing', () => {\n    \n    enhancedTest('should perform well on mobile devices', async ({ page, testHelpers }) => {\n      await page.setViewportSize(VIEWPORTS.MOBILE);\n      \n      // Throttle CPU to simulate mobile device\n      const client = await page.context().newCDPSession(page);\n      await client.send('Emulation.setCPUThrottlingRate', { rate: 4 });\n      \n      // Throttle network\n      await page.route('**/*', route => {\n        // Simulate 3G network delay\n        setTimeout(() => route.continue(), Math.random() * 100);\n      });\n      \n      const startTime = Date.now();\n      \n      await page.goto('/dashboard');\n      await testHelpers.waitForElement('[data-testid=\"main-dashboard\"]');\n      \n      const loadTime = Date.now() - startTime;\n      \n      // Mobile load time should be reasonable\n      expect(loadTime).toBeLessThan(5000); // 5 seconds max\n      \n      // Test scroll performance\n      const scrollStart = Date.now();\n      \n      for (let i = 0; i < 10; i++) {\n        await page.mouse.wheel(0, 100);\n        await page.waitForTimeout(50);\n      }\n      \n      const scrollTime = Date.now() - scrollStart;\n      expect(scrollTime).toBeLessThan(2000); // 2 seconds for 10 scrolls\n      \n      // Test animation performance\n      const animationElement = page.locator('[data-testid=\"animated-element\"]');\n      if (await animationElement.isVisible()) {\n        const animationStart = Date.now();\n        \n        await animationElement.tap();\n        await testHelpers.waitForAnimation('[data-testid=\"animated-element\"]');\n        \n        const animationTime = Date.now() - animationStart;\n        expect(animationTime).toBeLessThan(1000); // 1 second max for animation\n      }\n      \n      // Measure memory usage\n      const memoryUsage = await page.evaluate(() => {\n        const perf = (performance as any).memory;\n        if (perf) {\n          return {\n            used: perf.usedJSHeapSize,\n            total: perf.totalJSHeapSize,\n            limit: perf.jsHeapSizeLimit\n          };\n        }\n        return null;\n      });\n      \n      if (memoryUsage) {\n        console.log('Mobile Memory Usage:', memoryUsage);\n        // Memory usage should be reasonable for mobile\n        expect(memoryUsage.used).toBeLessThan(memoryUsage.limit * 0.8); // Less than 80% of limit\n      }\n      \n      // Remove throttling\n      await client.send('Emulation.setCPUThrottlingRate', { rate: 1 });\n      await page.unroute('**/*');\n    });\n  });\n});"