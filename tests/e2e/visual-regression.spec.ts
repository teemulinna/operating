/**
 * Visual Regression Testing E2E Tests
 * Tests UI consistency, visual changes, and design system compliance
 */
import { test, expect } from '@playwright/test';
import { test as base, VIEWPORTS } from '@playwright/test

const { test: enhancedTest, expect: enhancedExpected } = base;

enhancedTest.describe('Visual Regression Testing', () => {
  
  // Configure test for visual consistency
  enhancedTest.beforeEach(async ({ page }) => {\n    // Ensure consistent font rendering\n    await page.addInitScript(() => {\n      // Disable font smoothing variations\n      document.body.style.webkitFontSmoothing = 'antialiased';\n      document.body.style.mozOsxFontSmoothing = 'grayscale';\n      \n      // Disable animations for consistent screenshots\n      const style = document.createElement('style');\n      style.textContent = `\n        *, *::before, *::after {\n          animation-duration: 0s !important;\n          animation-delay: 0s !important;\n          transition-duration: 0s !important;\n          transition-delay: 0s !important;\n        }\n      `;\n      document.head.appendChild(style);\n    });\n    \n    // Wait for fonts to load\n    await page.waitForLoadState('networkidle');\n    await page.waitForTimeout(1000);\n  });\n\n  enhancedTest.describe('Page Layout Consistency', () => {\n    \n    enhancedTest('should maintain consistent dashboard layout', async ({ page, testHelpers }) => {\n      await page.goto('/dashboard');\n      await testHelpers.waitForElement('[data-testid=\"main-dashboard\"]');\n      \n      // Wait for all dashboard widgets to load\n      await page.waitForSelector('[data-testid=\"dashboard-widgets\"]');\n      \n      // Hide dynamic content that might cause flakiness\n      await page.addStyleTag({\n        content: `\n          [data-testid=\"current-time\"],\n          [data-testid=\"last-updated\"],\n          .timestamp,\n          .real-time-data {\n            visibility: hidden;\n          }\n        `\n      });\n      \n      // Take full page screenshot\n      await expect(page).toHaveScreenshot('dashboard-full-page.png', {\n        fullPage: true,\n        animations: 'disabled'\n      });\n      \n      // Take viewport screenshot\n      await expect(page).toHaveScreenshot('dashboard-viewport.png', {\n        animations: 'disabled'\n      });\n      \n      // Test individual dashboard sections\n      const sections = [\n        '[data-testid=\"summary-cards\"]',\n        '[data-testid=\"project-overview\"]',\n        '[data-testid=\"resource-utilization\"]',\n        '[data-testid=\"recent-activities\"]'\n      ];\n      \n      for (const sectionSelector of sections) {\n        const section = page.locator(sectionSelector);\n        if (await section.isVisible()) {\n          const sectionName = sectionSelector.replace(/\\[data-testid=\"([^\"]+)\"\\]/, '$1');\n          await expect(section).toHaveScreenshot(`dashboard-section-${sectionName}.png`);\n        }\n      }\n      \n      // Test responsive breakpoints\n      const breakpoints = [\n        { name: 'mobile', width: 375, height: 667 },\n        { name: 'tablet', width: 768, height: 1024 },\n        { name: 'desktop', width: 1440, height: 900 }\n      ];\n      \n      for (const breakpoint of breakpoints) {\n        await page.setViewportSize(breakpoint);\n        await page.waitForTimeout(500); // Allow layout to adjust\n        \n        await expect(page).toHaveScreenshot(`dashboard-${breakpoint.name}.png`, {\n          animations: 'disabled'\n        });\n      }\n      \n      // Reset to default viewport\n      await page.setViewportSize({ width: 1920, height: 1080 });\n    });\n\n    enhancedTest('should maintain consistent project listing layout', async ({ page, testHelpers }) => {\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Mock consistent data for visual tests\n      const mockProjects = Array.from({ length: 12 }, (_, i) => ({\n        id: i + 1,\n        name: `Project ${String(i + 1).padStart(2, '0')}`,\n        client: 'Test Client Inc',\n        status: ['active', 'completed', 'on-hold'][i % 3],\n        startDate: '2024-01-15',\n        endDate: '2024-06-30',\n        progress: Math.floor((i + 1) * 8.33), // Consistent progress values\n        team: ['Alice', 'Bob', 'Charlie'].slice(0, (i % 3) + 1)\n      }));\n      \n      await page.route('**/api/projects**', route => {\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            data: mockProjects,\n            pagination: { currentPage: 1, totalItems: 12, totalPages: 1 }\n          })\n        });\n      });\n      \n      // Reload to apply mocked data\n      await page.reload();\n      await testHelpers.waitForElement('[data-testid=\"projects-grid\"]');\n      \n      // Test different view modes\n      const viewModes = [\n        { selector: '[data-testid=\"grid-view\"]', name: 'grid' },\n        { selector: '[data-testid=\"list-view\"]', name: 'list' },\n        { selector: '[data-testid=\"card-view\"]', name: 'card' }\n      ];\n      \n      for (const viewMode of viewModes) {\n        const viewButton = page.locator(viewMode.selector);\n        if (await viewButton.isVisible()) {\n          await viewButton.click();\n          await page.waitForTimeout(500);\n          \n          await expect(page).toHaveScreenshot(`projects-${viewMode.name}-view.png`, {\n            animations: 'disabled'\n          });\n        }\n      }\n      \n      // Test filter states\n      const filterTests = [\n        { filter: '[data-testid=\"filter-active\"]', name: 'filtered-active' },\n        { filter: '[data-testid=\"filter-completed\"]', name: 'filtered-completed' }\n      ];\n      \n      for (const filterTest of filterTests) {\n        const filter = page.locator(filterTest.filter);\n        if (await filter.isVisible()) {\n          await filter.click();\n          await page.waitForTimeout(500);\n          \n          await expect(page).toHaveScreenshot(`projects-${filterTest.name}.png`, {\n            animations: 'disabled'\n          });\n          \n          // Clear filter\n          await filter.click();\n        }\n      }\n      \n      await page.unroute('**/api/projects**');\n    });\n\n    enhancedTest('should maintain consistent form layouts', async ({ page, testHelpers }) => {\n      await page.goto('/projects/create');\n      await testHelpers.waitForElement('[data-testid=\"project-creation-form\"]');\n      \n      // Test empty form state\n      await expect(page.locator('[data-testid=\"project-creation-form\"]')).toHaveScreenshot('form-empty-state.png');\n      \n      // Test form with data\n      const formData = {\n        'project-name': 'Visual Test Project',\n        'client-name': 'Test Client Corporation',\n        'project-description': 'This is a consistent test description for visual regression testing purposes.',\n        'start-date': '2024-03-01',\n        'end-date': '2024-09-30',\n        'budget': '150000',\n        'hourly-rate': '85'\n      };\n      \n      for (const [fieldId, value] of Object.entries(formData)) {\n        await testHelpers.fillFormField(`[data-testid=\"${fieldId}\"]`, value);\n      }\n      \n      // Test form with data\n      await expect(page.locator('[data-testid=\"project-creation-form\"]')).toHaveScreenshot('form-filled-state.png');\n      \n      // Test validation states\n      await page.fill('[data-testid=\"project-name\"]', ''); // Clear required field\n      await page.click('[data-testid=\"submit-project\"]');\n      await page.waitForTimeout(500);\n      \n      await expect(page.locator('[data-testid=\"project-creation-form\"]')).toHaveScreenshot('form-validation-errors.png');\n      \n      // Test form steps if multi-step\n      if (await page.locator('[data-testid=\"form-step-2\"]').isVisible()) {\n        await testHelpers.fillFormField('[data-testid=\"project-name\"]', formData['project-name']);\n        await page.click('[data-testid=\"next-step\"]');\n        await testHelpers.waitForElement('[data-testid=\"form-step-2\"]');\n        \n        await expect(page.locator('[data-testid=\"multi-step-form\"]')).toHaveScreenshot('form-step-2.png');\n      }\n    });\n  });\n\n  enhancedTest.describe('Component Visual Consistency', () => {\n    \n    enhancedTest('should maintain consistent button styles', async ({ page, testHelpers }) => {\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Create a test page with all button variants\n      await page.addInitScript(() => {\n        const style = document.createElement('style');\n        style.textContent = `\n          .button-showcase {\n            padding: 2rem;\n            background: white;\n            display: flex;\n            flex-wrap: wrap;\n            gap: 1rem;\n            align-items: flex-start;\n          }\n          .button-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n            align-items: flex-start;\n          }\n          .button-group h3 {\n            margin: 0;\n            font-size: 0.875rem;\n            font-weight: 600;\n            color: #374151;\n          }\n        `;\n        document.head.appendChild(style);\n      });\n      \n      // Inject button showcase\n      await page.evaluate(() => {\n        const showcase = document.createElement('div');\n        showcase.className = 'button-showcase';\n        showcase.innerHTML = `\n          <div class=\"button-group\">\n            <h3>Primary Buttons</h3>\n            <button data-testid=\"btn-primary\" class=\"btn btn-primary\">Primary</button>\n            <button data-testid=\"btn-primary-disabled\" class=\"btn btn-primary\" disabled>Primary Disabled</button>\n            <button data-testid=\"btn-primary-loading\" class=\"btn btn-primary\">Primary Loading</button>\n          </div>\n          \n          <div class=\"button-group\">\n            <h3>Secondary Buttons</h3>\n            <button data-testid=\"btn-secondary\" class=\"btn btn-secondary\">Secondary</button>\n            <button data-testid=\"btn-secondary-disabled\" class=\"btn btn-secondary\" disabled>Secondary Disabled</button>\n          </div>\n          \n          <div class=\"button-group\">\n            <h3>Outline Buttons</h3>\n            <button data-testid=\"btn-outline\" class=\"btn btn-outline\">Outline</button>\n            <button data-testid=\"btn-outline-disabled\" class=\"btn btn-outline\" disabled>Outline Disabled</button>\n          </div>\n          \n          <div class=\"button-group\">\n            <h3>Size Variants</h3>\n            <button data-testid=\"btn-small\" class=\"btn btn-primary btn-sm\">Small</button>\n            <button data-testid=\"btn-medium\" class=\"btn btn-primary btn-md\">Medium</button>\n            <button data-testid=\"btn-large\" class=\"btn btn-primary btn-lg\">Large</button>\n          </div>\n          \n          <div class=\"button-group\">\n            <h3>Icon Buttons</h3>\n            <button data-testid=\"btn-icon-only\" class=\"btn btn-primary btn-icon\">+</button>\n            <button data-testid=\"btn-icon-text\" class=\"btn btn-primary\">+ Add Item</button>\n          </div>\n        `;\n        document.body.appendChild(showcase);\n      });\n      \n      await expect(page.locator('.button-showcase')).toHaveScreenshot('button-variants.png');\n      \n      // Test button hover states\n      const hoverButtons = [\n        '[data-testid=\"btn-primary\"]',\n        '[data-testid=\"btn-secondary\"]',\n        '[data-testid=\"btn-outline\"]'\n      ];\n      \n      for (const buttonSelector of hoverButtons) {\n        const button = page.locator(buttonSelector);\n        await button.hover();\n        await page.waitForTimeout(200);\n        \n        const buttonName = buttonSelector.replace(/\\[data-testid=\"btn-([^\"]+)\"\\]/, '$1');\n        await expect(button).toHaveScreenshot(`button-hover-${buttonName}.png`);\n      }\n      \n      // Test focus states\n      for (const buttonSelector of hoverButtons) {\n        const button = page.locator(buttonSelector);\n        await button.focus();\n        await page.waitForTimeout(200);\n        \n        const buttonName = buttonSelector.replace(/\\[data-testid=\"btn-([^\"]+)\"\\]/, '$1');\n        await expect(button).toHaveScreenshot(`button-focus-${buttonName}.png`);\n      }\n    });\n\n    enhancedTest('should maintain consistent form input styles', async ({ page, testHelpers }) => {\n      await page.goto('/projects/create');\n      await testHelpers.waitForElement('[data-testid=\"project-creation-form\"]');\n      \n      // Create input showcase\n      await page.evaluate(() => {\n        const showcase = document.createElement('div');\n        showcase.className = 'input-showcase';\n        showcase.style.cssText = 'padding: 2rem; background: white; display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem;';\n        \n        showcase.innerHTML = `\n          <div>\n            <h3>Text Inputs</h3>\n            <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n              <div>\n                <label for=\"input-normal\">Normal Input</label>\n                <input id=\"input-normal\" type=\"text\" placeholder=\"Enter text...\" class=\"form-input\" />\n              </div>\n              <div>\n                <label for=\"input-focused\">Focused Input</label>\n                <input id=\"input-focused\" type=\"text\" value=\"Focused state\" class=\"form-input focused\" />\n              </div>\n              <div>\n                <label for=\"input-error\">Error Input</label>\n                <input id=\"input-error\" type=\"text\" value=\"Error state\" class=\"form-input error\" />\n                <span class=\"error-message\">This field has an error</span>\n              </div>\n              <div>\n                <label for=\"input-disabled\">Disabled Input</label>\n                <input id=\"input-disabled\" type=\"text\" value=\"Disabled state\" class=\"form-input\" disabled />\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h3>Select Inputs</h3>\n            <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n              <div>\n                <label for=\"select-normal\">Normal Select</label>\n                <select id=\"select-normal\" class=\"form-select\">\n                  <option>Option 1</option>\n                  <option selected>Option 2</option>\n                  <option>Option 3</option>\n                </select>\n              </div>\n              <div>\n                <label for=\"select-disabled\">Disabled Select</label>\n                <select id=\"select-disabled\" class=\"form-select\" disabled>\n                  <option>Disabled Option</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h3>Textarea</h3>\n            <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n              <div>\n                <label for=\"textarea-normal\">Normal Textarea</label>\n                <textarea id=\"textarea-normal\" class=\"form-textarea\" rows=\"3\" placeholder=\"Enter description...\"></textarea>\n              </div>\n              <div>\n                <label for=\"textarea-filled\">Filled Textarea</label>\n                <textarea id=\"textarea-filled\" class=\"form-textarea\" rows=\"3\">This is sample content for visual consistency testing.</textarea>\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h3>Checkboxes & Radios</h3>\n            <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n              <label class=\"checkbox-label\">\n                <input type=\"checkbox\" class=\"form-checkbox\" />\n                Checkbox Option 1\n              </label>\n              <label class=\"checkbox-label\">\n                <input type=\"checkbox\" class=\"form-checkbox\" checked />\n                Checkbox Option 2 (Checked)\n              </label>\n              <label class=\"radio-label\">\n                <input type=\"radio\" name=\"radio-group\" class=\"form-radio\" />\n                Radio Option 1\n              </label>\n              <label class=\"radio-label\">\n                <input type=\"radio\" name=\"radio-group\" class=\"form-radio\" checked />\n                Radio Option 2 (Selected)\n              </label>\n            </div>\n          </div>\n        `;\n        document.body.appendChild(showcase);\n      });\n      \n      await expect(page.locator('.input-showcase')).toHaveScreenshot('form-inputs.png');\n      \n      // Test input focus states\n      await page.focus('#input-normal');\n      await page.waitForTimeout(200);\n      await expect(page.locator('#input-normal')).toHaveScreenshot('input-focused-state.png');\n      \n      // Test select dropdown\n      await page.click('#select-normal');\n      await page.waitForTimeout(500);\n      await expect(page.locator('#select-normal')).toHaveScreenshot('select-opened.png');\n    });\n\n    enhancedTest('should maintain consistent card layouts', async ({ page, testHelpers }) => {\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Mock consistent card data\n      const mockCards = [\n        {\n          title: 'Standard Project Card',\n          subtitle: 'Active Project',\n          status: 'active',\n          progress: 65,\n          team: ['Alice', 'Bob', 'Charlie'],\n          dueDate: '2024-06-30'\n        },\n        {\n          title: 'Completed Project Card',\n          subtitle: 'Completed Project',\n          status: 'completed',\n          progress: 100,\n          team: ['Dave', 'Eve'],\n          dueDate: '2024-03-15'\n        },\n        {\n          title: 'On Hold Project Card',\n          subtitle: 'On Hold Project',\n          status: 'on-hold',\n          progress: 30,\n          team: ['Frank'],\n          dueDate: '2024-09-30'\n        }\n      ];\n      \n      // Create card showcase\n      await page.evaluate((cards) => {\n        const showcase = document.createElement('div');\n        showcase.className = 'card-showcase';\n        showcase.style.cssText = 'padding: 2rem; background: #f9fafb; display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 1.5rem;';\n        \n        const cardHTML = cards.map(card => `\n          <div class=\"project-card ${card.status}\">\n            <div class=\"card-header\">\n              <h3 class=\"card-title\">${card.title}</h3>\n              <span class=\"status-badge status-${card.status}\">${card.subtitle}</span>\n            </div>\n            <div class=\"card-content\">\n              <div class=\"progress-section\">\n                <div class=\"progress-label\">Progress</div>\n                <div class=\"progress-bar\">\n                  <div class=\"progress-fill\" style=\"width: ${card.progress}%\"></div>\n                </div>\n                <span class=\"progress-text\">${card.progress}%</span>\n              </div>\n              <div class=\"team-section\">\n                <div class=\"team-label\">Team</div>\n                <div class=\"team-avatars\">\n                  ${card.team.map(member => `<div class=\"avatar\">${member[0]}</div>`).join('')}\n                </div>\n              </div>\n              <div class=\"date-section\">\n                <div class=\"date-label\">Due Date</div>\n                <div class=\"date-value\">${card.dueDate}</div>\n              </div>\n            </div>\n            <div class=\"card-actions\">\n              <button class=\"btn btn-primary btn-sm\">View</button>\n              <button class=\"btn btn-secondary btn-sm\">Edit</button>\n            </div>\n          </div>\n        `).join('');\n        \n        showcase.innerHTML = cardHTML;\n        document.body.appendChild(showcase);\n      }, mockCards);\n      \n      await expect(page.locator('.card-showcase')).toHaveScreenshot('project-cards.png');\n      \n      // Test card hover states\n      const cards = page.locator('.project-card');\n      const cardCount = await cards.count();\n      \n      for (let i = 0; i < cardCount; i++) {\n        const card = cards.nth(i);\n        await card.hover();\n        await page.waitForTimeout(200);\n        \n        await expect(card).toHaveScreenshot(`card-hover-${i}.png`);\n      }\n    });\n  });\n\n  enhancedTest.describe('Data Visualization Consistency', () => {\n    \n    enhancedTest('should maintain consistent chart appearances', async ({ page, testHelpers }) => {\n      await page.goto('/analytics');\n      await testHelpers.waitForElement('[data-testid=\"analytics-page\"]');\n      \n      // Mock consistent chart data\n      await page.addInitScript(() => {\n        // Mock Chart.js or other charting library data\n        window.mockChartData = {\n          pieChart: {\n            labels: ['Frontend', 'Backend', 'DevOps', 'Design', 'QA'],\n            data: [35, 30, 15, 12, 8],\n            colors: ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6']\n          },\n          barChart: {\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n            datasets: [\n              { label: 'Projects', data: [12, 19, 15, 25, 22, 18], color: '#3B82F6' },\n              { label: 'Completed', data: [8, 15, 12, 20, 18, 15], color: '#10B981' }\n            ]\n          },\n          lineChart: {\n            labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],\n            data: [65, 72, 68, 78],\n            color: '#8B5CF6'\n          }\n        };\n      });\n      \n      // Wait for charts to render\n      await page.waitForTimeout(2000);\n      \n      // Test individual chart components\n      const chartSelectors = [\n        '[data-testid=\"resource-utilization-chart\"]',\n        '[data-testid=\"project-progress-chart\"]',\n        '[data-testid=\"team-performance-chart\"]',\n        '[data-testid=\"budget-overview-chart\"]'\n      ];\n      \n      for (const selector of chartSelectors) {\n        const chart = page.locator(selector);\n        if (await chart.isVisible()) {\n          const chartName = selector.replace(/\\[data-testid=\"([^\"]+)-chart\"\\]/, '$1');\n          await expect(chart).toHaveScreenshot(`chart-${chartName}.png`);\n        }\n      }\n      \n      // Test chart legends and tooltips\n      const chartWithTooltip = page.locator('[data-testid=\"interactive-chart\"]').first();\n      if (await chartWithTooltip.isVisible()) {\n        await chartWithTooltip.hover();\n        await page.waitForTimeout(500);\n        \n        const tooltip = page.locator('[data-testid=\"chart-tooltip\"]');\n        if (await tooltip.isVisible()) {\n          await expect(tooltip).toHaveScreenshot('chart-tooltip.png');\n        }\n      }\n      \n      // Test chart responsive behavior\n      await page.setViewportSize({ width: 768, height: 1024 });\n      await page.waitForTimeout(1000);\n      \n      const responsiveChart = page.locator('[data-testid=\"responsive-chart\"]').first();\n      if (await responsiveChart.isVisible()) {\n        await expect(responsiveChart).toHaveScreenshot('chart-responsive.png');\n      }\n      \n      await page.setViewportSize({ width: 1920, height: 1080 });\n    });\n\n    enhancedTest('should maintain consistent table layouts', async ({ page, testHelpers }) => {\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Switch to table view if available\n      const tableViewButton = page.locator('[data-testid=\"table-view\"]');\n      if (await tableViewButton.isVisible()) {\n        await tableViewButton.click();\n        await testHelpers.waitForElement('[data-testid=\"projects-table\"]');\n      }\n      \n      // Mock consistent table data\n      const mockTableData = Array.from({ length: 10 }, (_, i) => ({\n        id: i + 1,\n        name: `Project ${String(i + 1).padStart(2, '0')}`,\n        client: `Client ${String.fromCharCode(65 + (i % 5))}`,\n        status: ['Active', 'Completed', 'On Hold'][i % 3],\n        startDate: '2024-01-15',\n        endDate: '2024-06-30',\n        progress: Math.floor((i + 1) * 9),\n        team: Math.floor(Math.random() * 8) + 2\n      }));\n      \n      await page.route('**/api/projects**', route => {\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({ data: mockTableData })\n        });\n      });\n      \n      await page.reload();\n      await testHelpers.waitForElement('[data-testid=\"data-table\"]');\n      \n      // Test table states\n      await expect(page.locator('[data-testid=\"data-table\"]')).toHaveScreenshot('table-normal-state.png');\n      \n      // Test table sorting\n      const sortableHeader = page.locator('[data-testid=\"column-header-name\"]');\n      if (await sortableHeader.isVisible()) {\n        await sortableHeader.click();\n        await page.waitForTimeout(500);\n        \n        await expect(page.locator('[data-testid=\"data-table\"]')).toHaveScreenshot('table-sorted-asc.png');\n        \n        await sortableHeader.click();\n        await page.waitForTimeout(500);\n        \n        await expect(page.locator('[data-testid=\"data-table\"]')).toHaveScreenshot('table-sorted-desc.png');\n      }\n      \n      // Test row selection\n      const firstRowCheckbox = page.locator('[data-testid=\"row-checkbox-0\"]');\n      if (await firstRowCheckbox.isVisible()) {\n        await firstRowCheckbox.check();\n        await page.waitForTimeout(200);\n        \n        await expect(page.locator('[data-testid=\"data-table\"]')).toHaveScreenshot('table-row-selected.png');\n      }\n      \n      // Test table filters\n      const filterButton = page.locator('[data-testid=\"table-filters\"]');\n      if (await filterButton.isVisible()) {\n        await filterButton.click();\n        await testHelpers.waitForElement('[data-testid=\"filter-panel\"]');\n        \n        await expect(page.locator('[data-testid=\"projects-page\"]')).toHaveScreenshot('table-with-filters.png');\n      }\n      \n      await page.unroute('**/api/projects**');\n    });\n  });\n\n  enhancedTest.describe('Theme and Color Consistency', () => {\n    \n    enhancedTest('should maintain consistent light theme', async ({ page, testHelpers }) => {\n      // Ensure light theme is active\n      await page.goto('/dashboard');\n      await testHelpers.waitForElement('[data-testid=\"main-dashboard\"]');\n      \n      // Set light theme if theme toggle exists\n      const themeToggle = page.locator('[data-testid=\"theme-toggle\"]');\n      if (await themeToggle.isVisible()) {\n        const currentTheme = await page.getAttribute('html', 'data-theme');\n        if (currentTheme !== 'light') {\n          await themeToggle.click();\n          await page.waitForTimeout(500);\n        }\n      }\n      \n      // Test key pages in light theme\n      const pages = [\n        { url: '/dashboard', name: 'dashboard' },\n        { url: '/projects', name: 'projects' },\n        { url: '/employees', name: 'employees' },\n        { url: '/analytics', name: 'analytics' }\n      ];\n      \n      for (const pageTest of pages) {\n        await page.goto(pageTest.url);\n        await page.waitForLoadState('networkidle');\n        await page.waitForTimeout(1000);\n        \n        await expect(page).toHaveScreenshot(`light-theme-${pageTest.name}.png`, {\n          fullPage: true,\n          animations: 'disabled'\n        });\n      }\n    });\n\n    enhancedTest('should maintain consistent dark theme', async ({ page, testHelpers }) => {\n      await page.goto('/dashboard');\n      await testHelpers.waitForElement('[data-testid=\"main-dashboard\"]');\n      \n      // Enable dark theme\n      const themeToggle = page.locator('[data-testid=\"theme-toggle\"]');\n      if (await themeToggle.isVisible()) {\n        const currentTheme = await page.getAttribute('html', 'data-theme');\n        if (currentTheme !== 'dark') {\n          await themeToggle.click();\n          await page.waitForTimeout(500);\n        }\n      } else {\n        // Manually set dark theme via script\n        await page.evaluate(() => {\n          document.documentElement.setAttribute('data-theme', 'dark');\n          document.documentElement.classList.add('dark');\n        });\n        await page.waitForTimeout(500);\n      }\n      \n      // Test key pages in dark theme\n      const pages = [\n        { url: '/dashboard', name: 'dashboard' },\n        { url: '/projects', name: 'projects' },\n        { url: '/employees', name: 'employees' },\n        { url: '/analytics', name: 'analytics' }\n      ];\n      \n      for (const pageTest of pages) {\n        await page.goto(pageTest.url);\n        await page.waitForLoadState('networkidle');\n        await page.waitForTimeout(1000);\n        \n        await expect(page).toHaveScreenshot(`dark-theme-${pageTest.name}.png`, {\n          fullPage: true,\n          animations: 'disabled'\n        });\n      }\n    });\n\n    enhancedTest('should maintain consistent status colors', async ({ page, testHelpers }) => {\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Create status color showcase\n      await page.evaluate(() => {\n        const showcase = document.createElement('div');\n        showcase.className = 'status-showcase';\n        showcase.style.cssText = 'padding: 2rem; background: white; display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 2rem;';\n        \n        const statusTypes = [\n          { name: 'Active', class: 'status-active', color: '#10B981' },\n          { name: 'Completed', class: 'status-completed', color: '#6B7280' },\n          { name: 'On Hold', class: 'status-on-hold', color: '#F59E0B' },\n          { name: 'Cancelled', class: 'status-cancelled', color: '#EF4444' },\n          { name: 'Planning', class: 'status-planning', color: '#3B82F6' }\n        ];\n        \n        const statusHTML = statusTypes.map(status => `\n          <div class=\"status-demo\">\n            <h4>${status.name}</h4>\n            <div class=\"status-examples\">\n              <span class=\"badge ${status.class}\">${status.name}</span>\n              <div class=\"status-dot ${status.class}\"></div>\n              <div class=\"status-bar ${status.class}\" style=\"background-color: ${status.color}; width: 100%; height: 8px; border-radius: 4px;\"></div>\n              <button class=\"btn btn-${status.name.toLowerCase().replace(' ', '-')}\">${status.name} Action</button>\n            </div>\n          </div>\n        `).join('');\n        \n        showcase.innerHTML = statusHTML;\n        document.body.appendChild(showcase);\n      });\n      \n      await expect(page.locator('.status-showcase')).toHaveScreenshot('status-colors.png');\n    });\n  });\n\n  enhancedTest.describe('Responsive Visual Consistency', () => {\n    \n    enhancedTest('should maintain visual consistency across breakpoints', async ({ page, testHelpers }) => {\n      const testPages = ['/dashboard', '/projects', '/analytics'];\n      const breakpoints = [\n        { name: 'mobile', width: 375, height: 667 },\n        { name: 'tablet', width: 768, height: 1024 },\n        { name: 'desktop', width: 1440, height: 900 },\n        { name: 'wide', width: 1920, height: 1080 }\n      ];\n      \n      for (const pagePath of testPages) {\n        const pageName = pagePath.replace('/', '') || 'home';\n        \n        for (const breakpoint of breakpoints) {\n          await page.setViewportSize(breakpoint);\n          await page.goto(pagePath);\n          await page.waitForLoadState('networkidle');\n          await page.waitForTimeout(1000);\n          \n          // Hide dynamic content\n          await page.addStyleTag({\n            content: `\n              [data-testid*=\"time\"],\n              [data-testid*=\"updated\"],\n              .timestamp {\n                visibility: hidden;\n              }\n            `\n          });\n          \n          await expect(page).toHaveScreenshot(`responsive-${pageName}-${breakpoint.name}.png`, {\n            fullPage: true,\n            animations: 'disabled'\n          });\n        }\n      }\n    });\n  });\n\n  enhancedTest.describe('Error State Visual Consistency', () => {\n    \n    enhancedTest('should maintain consistent error displays', async ({ page, testHelpers }) => {\n      await page.goto('/projects');\n      await testHelpers.waitForElement('[data-testid=\"projects-page\"]');\n      \n      // Mock various error states\n      const errorScenarios = [\n        {\n          name: '404-error',\n          route: '**/api/projects**',\n          response: { status: 404, body: { error: 'Not Found' } }\n        },\n        {\n          name: '500-error',\n          route: '**/api/projects**',\n          response: { status: 500, body: { error: 'Internal Server Error' } }\n        },\n        {\n          name: 'network-error',\n          route: '**/api/projects**',\n          response: { status: 0, body: null } // Network error\n        }\n      ];\n      \n      for (const scenario of errorScenarios) {\n        await page.route(scenario.route, route => {\n          if (scenario.response.status === 0) {\n            route.abort('failed');\n          } else {\n            route.fulfill({\n              status: scenario.response.status,\n              contentType: 'application/json',\n              body: JSON.stringify(scenario.response.body)\n            });\n          }\n        });\n        \n        await page.reload();\n        await page.waitForTimeout(2000);\n        \n        await expect(page).toHaveScreenshot(`error-state-${scenario.name}.png`);\n        \n        await page.unroute(scenario.route);\n      }\n      \n      // Test empty state\n      await page.route('**/api/projects**', route => {\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({ data: [], pagination: { totalItems: 0 } })\n        });\n      });\n      \n      await page.reload();\n      await testHelpers.waitForElement('[data-testid=\"empty-state\"]');\n      \n      await expect(page).toHaveScreenshot('empty-state.png');\n      \n      await page.unroute('**/api/projects**');\n    });\n  });\n});"