"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("@playwright/test");
const test_2 = require("@playwright/test");
const { test: enhancedTest, expect: enhancedExpect } = test_2.test;
enhancedTest.describe('Phase 3: Project Pipeline Integration', () => {
    enhancedTest.beforeEach(async ({ page, testHelpers }) => {
        await page.goto('/projects');
        await testHelpers.waitForElement('[data-testid="projects-page"]');
    });
    enhancedTest.describe('Project Creation with Resource Integration', () => {
        enhancedTest('should create project with predefined roles and assignments', async ({ page, testHelpers }) => {
            await testHelpers.clickAndWait('[data-testid="create-project-btn"]');
            await testHelpers.fillFormField('[data-testid="project-name"]', 'Full Stack Web Application');
            await testHelpers.fillFormField('[data-testid="project-description"]', 'Complete web application with React frontend and Node.js backend');
            await testHelpers.fillFormField('[data-testid="client-name"]', 'Tech Innovations Inc');
            await page.fill('[data-testid="start-date"]', '2024-02-01');
            await page.fill('[data-testid="end-date"]', '2024-08-31');
            await testHelpers.fillFormField('[data-testid="budget"]', '150000');
            await testHelpers.fillFormField('[data-testid="hourly-rate"]', '85');
            await page.click('[data-testid="add-project-role"]');
            await testHelpers.fillFormField('[data-testid="role-name-0"]', 'Frontend Developer');
            await testHelpers.fillFormField('[data-testid="role-description-0"]', 'React.js frontend development');
            await page.selectOption('[data-testid="experience-level-0"]', 'senior');
            await testHelpers.fillFormField('[data-testid="allocation-percentage-0"]', '80');
            await testHelpers.fillFormField('[data-testid="estimated-hours-0"]', '320');
            await page.fill('[data-testid="required-skills-0"]', 'React, TypeScript, CSS');
            await page.keyboard.press('Enter');
            await page.click('[data-testid="add-project-role"]');
            await testHelpers.fillFormField('[data-testid="role-name-1"]', 'Backend Developer');
            await testHelpers.fillFormField('[data-testid="role-description-1"]', 'Node.js API development');
            await page.selectOption('[data-testid="experience-level-1"]', 'senior');
            await testHelpers.fillFormField('[data-testid="allocation-percentage-1"]', '75');
            await testHelpers.fillFormField('[data-testid="estimated-hours-1"]', '280');
            await page.click('[data-testid="add-project-role"]');
            await testHelpers.fillFormField('[data-testid="role-name-2"]', 'DevOps Engineer');
            await page.selectOption('[data-testid="experience-level-2"]', 'intermediate');
            await testHelpers.fillFormField('[data-testid="allocation-percentage-2"]', '40');
            await testHelpers.clickAndWait('[data-testid="submit-project"]', { waitFor: 'networkidle' });
            await testHelpers.verifyToast('Project created successfully');
            await testHelpers.waitForElement('[data-testid="project-detail-page"]');
            await (0, test_1.expect)(page.locator('h1')).toContainText('Full Stack Web Application');
            await (0, test_1.expect)(page.locator('[data-testid="project-roles"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="role-card"]')).toHaveCount(3);
            const frontendRole = page.locator('[data-testid="role-card"]').first();
            await (0, test_1.expect)(frontendRole.locator('h3')).toContainText('Frontend Developer');
            await (0, test_1.expect)(frontendRole.locator('[data-testid="allocation-percentage"]')).toContainText('80%');
            await page.click('[data-testid="assign-role-0"]');
            await testHelpers.waitForElement('[data-testid="assignment-modal"]');
            await testHelpers.fillFormField('[data-testid="employee-search"]', 'Alice Johnson');
            await page.click('[data-testid="employee-option-alice"]');
            await page.fill('[data-testid="assignment-start-date"]', '2024-02-01');
            await page.fill('[data-testid="assignment-end-date"]', '2024-08-31');
            await page.selectOption('[data-testid="confidence-level"]', 'confirmed');
            await testHelpers.clickAndWait('[data-testid="confirm-assignment"]');
            await testHelpers.verifyToast('Role assigned successfully');
            await page.click('[data-testid="project-timeline-tab"]');
            await testHelpers.waitForElement('[data-testid="timeline-view"]');
            await (0, test_1.expect)(page.locator('[data-testid="assignment-alice"]')).toBeVisible();
        });
        enhancedTest('should detect resource conflicts during project creation', async ({ page, testHelpers }) => {
            await testHelpers.clickAndWait('[data-testid="create-project-btn"]');
            await testHelpers.fillFormField('[data-testid="project-name"]', 'Conflicting Project');
            await testHelpers.fillFormField('[data-testid="client-name"]', 'Conflict Corp');
            await page.fill('[data-testid="start-date"]', '2024-02-01');
            await page.fill('[data-testid="end-date"]', '2024-06-30');
            await page.click('[data-testid="add-project-role"]');
            await testHelpers.fillFormField('[data-testid="role-name-0"]', 'Senior Developer');
            await page.selectOption('[data-testid="experience-level-0"]', 'senior');
            await testHelpers.fillFormField('[data-testid="allocation-percentage-0"]', '100');
            await page.click('[data-testid="submit-project"]');
            await testHelpers.waitForElement('[data-testid="conflict-warning-modal"]');
            await (0, test_1.expect)(page.locator('[data-testid="conflict-message"]')).toContainText('Resource conflicts detected');
            await page.click('[data-testid="view-conflicts"]');
            await testHelpers.waitForElement('[data-testid="conflict-details"]');
            await (0, test_1.expect)(page.locator('[data-testid="over-allocation-warning"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="suggested-alternatives"]')).toBeVisible();
            await page.click('[data-testid="auto-resolve-conflicts"]');
            await testHelpers.waitForElement('[data-testid="resolution-suggestions"]');
            await page.click('[data-testid="accept-suggestion-0"]');
            await testHelpers.clickAndWait('[data-testid="confirm-resolution"]');
            await testHelpers.verifyToast('Project created with conflict resolution');
        });
    });
    enhancedTest.describe('Project Lifecycle Management', () => {
        enhancedTest('should manage complete project lifecycle from planning to completion', async ({ page, testHelpers }) => {
            await page.click('[data-testid="project-card-mobile-app"]');
            await testHelpers.waitForElement('[data-testid="project-detail-page"]');
            await page.click('[data-testid="project-status-dropdown"]');
            await page.click('[data-testid="status-option-active"]');
            await testHelpers.waitForElement('[data-testid="status-change-modal"]');
            await (0, test_1.expect)(page.locator('[data-testid="status-change-impact"]')).toBeVisible();
            await page.click('[data-testid="confirm-status-change"]');
            await testHelpers.verifyToast('Project status updated to Active');
            await page.click('[data-testid="milestones-tab"]');
            await testHelpers.waitForElement('[data-testid="milestones-view"]');
            await page.click('[data-testid="add-milestone"]');
            await testHelpers.fillFormField('[data-testid="milestone-name"]', 'MVP Complete');
            await testHelpers.fillFormField('[data-testid="milestone-description"]', 'Minimum viable product ready for testing');
            await page.fill('[data-testid="milestone-date"]', '2024-04-15');
            await page.click('[data-testid="save-milestone"]');
            await page.click('[data-testid="budget-tab"]');
            await testHelpers.waitForElement('[data-testid="budget-overview"]');
            await (0, test_1.expect)(page.locator('[data-testid="budget-chart"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="burn-rate-chart"]')).toBeVisible();
            await page.click('[data-testid="time-tracking-tab"]');
            await testHelpers.waitForElement('[data-testid="time-entries"]');
            await page.click('[data-testid="add-time-entry"]');
            await testHelpers.fillFormField('[data-testid="hours-worked"]', '8');
            await testHelpers.fillFormField('[data-testid="task-description"]', 'Component development and testing');
            await page.fill('[data-testid="work-date"]', '2024-02-15');
            await page.click('[data-testid="save-time-entry"]');
            await testHelpers.verifyToast('Time entry added successfully');
            await page.click('[data-testid="project-actions-menu"]');
            await page.click('[data-testid="complete-project"]');
            await testHelpers.waitForElement('[data-testid="completion-checklist"]');
            await (0, test_1.expect)(page.locator('[data-testid="checklist-item"]')).toHaveCount.greaterThan(3);
            const checkboxes = page.locator('[data-testid="checklist-checkbox"]');
            const count = await checkboxes.count();
            for (let i = 0; i < count; i++) {
                await checkboxes.nth(i).check();
            }
            await page.click('[data-testid="finalize-completion"]');
            await testHelpers.verifyToast('Project completed successfully');
            await testHelpers.waitForElement('[data-testid="project-completion-analytics"]');
            await (0, test_1.expect)(page.locator('[data-testid="final-metrics"]')).toBeVisible();
        });
        enhancedTest('should handle project modifications and impact analysis', async ({ page, testHelpers }) => {
            await page.click('[data-testid="project-card-backend-migration"]');
            await testHelpers.waitForElement('[data-testid="project-detail-page"]');
            await page.click('[data-testid="modify-project"]');
            await testHelpers.waitForElement('[data-testid="modification-modal"]');
            await page.click('[data-testid="add-requirement"]');
            await testHelpers.fillFormField('[data-testid="new-requirement"]', 'Additional API endpoints for mobile app');
            await page.fill('[data-testid="new-end-date"]', '2024-10-31');
            await page.click('[data-testid="analyze-impact"]');
            await testHelpers.waitForElement('[data-testid="impact-analysis-results"]');
            await (0, test_1.expect)(page.locator('[data-testid="timeline-impact"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="budget-impact"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="resource-impact"]')).toBeVisible();
            await page.click('[data-testid="notify-stakeholders"]');
            await testHelpers.waitForElement('[data-testid="notification-preview"]');
            await testHelpers.fillFormField('[data-testid="notification-message"]', 'Project scope has been updated with additional API requirements');
            await page.click('[data-testid="send-notifications"]');
            await testHelpers.verifyToast('Stakeholder notifications sent');
            await page.click('[data-testid="apply-modifications"]');
            await testHelpers.verifyToast('Project modifications applied successfully');
            await page.click('[data-testid="project-timeline-tab"]');
            await (0, test_1.expect)(page.locator('[data-testid="updated-timeline"]')).toBeVisible();
        });
    });
    enhancedTest.describe('Resource Optimization and Intelligence', () => {
        enhancedTest('should provide intelligent resource recommendations', async ({ page, testHelpers }) => {
            await page.goto('/resource-planning');
            await testHelpers.waitForElement('[data-testid="resource-planning-page"]');
            await page.click('[data-testid="capacity-intelligence-tab"]');
            await testHelpers.waitForElement('[data-testid="capacity-dashboard"]');
            await (0, test_1.expect)(page.locator('[data-testid="total-capacity"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="utilized-capacity"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="available-capacity"]')).toBeVisible();
            await page.click('[data-testid="skill-recommendations"]');
            await testHelpers.waitForElement('[data-testid="skill-analysis"]');
            await page.selectOption('[data-testid="skill-filter"]', 'React');
            await testHelpers.waitForElement('[data-testid="react-specialists"]');
            const recommendations = page.locator('[data-testid="recommendation-card"]');
            await (0, test_1.expect)(recommendations).toHaveCount.greaterThan(2);
            const firstRec = recommendations.first();
            await (0, test_1.expect)(firstRec.locator('[data-testid="match-score"]')).toBeVisible();
            await (0, test_1.expect)(firstRec.locator('[data-testid="availability-indicator"]')).toBeVisible();
            await page.click('[data-testid="auto-assign-suggestions"]');
            await testHelpers.waitForElement('[data-testid="assignment-suggestions"]');
            await page.click('[data-testid="review-suggestion-0"]');
            await testHelpers.waitForElement('[data-testid="assignment-preview"]');
            await (0, test_1.expect)(page.locator('[data-testid="suggested-employee"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="confidence-score"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="skill-match-details"]')).toBeVisible();
            await page.click('[data-testid="apply-suggestion"]');
            await testHelpers.verifyToast('Assignment applied successfully');
            await page.click('[data-testid="workload-balancer"]');
            await testHelpers.waitForElement('[data-testid="workload-view"]');
            await (0, test_1.expect)(page.locator('[data-testid="workload-chart"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="over-allocated-employees"]')).toBeVisible();
            await page.click('[data-testid="auto-rebalance"]');
            await testHelpers.waitForElement('[data-testid="rebalancing-options"]');
            await page.selectOption('[data-testid="rebalancing-strategy"]', 'distribute-evenly');
            await page.click('[data-testid="execute-rebalancing"]');
            await testHelpers.verifyToast('Workload rebalancing completed');
            await testHelpers.waitForElement('[data-testid="rebalancing-summary"]');
            await (0, test_1.expect)(page.locator('[data-testid="affected-employees"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="improvement-metrics"]')).toBeVisible();
        });
    });
    enhancedTest.describe('Integration and Analytics', () => {
        enhancedTest('should provide comprehensive project analytics', async ({ page, testHelpers }) => {
            await page.goto('/analytics');
            await testHelpers.waitForElement('[data-testid="analytics-dashboard"]');
            await page.click('[data-testid="project-performance-tab"]');
            await testHelpers.waitForElement('[data-testid="performance-charts"]');
            await (0, test_1.expect)(page.locator('[data-testid="on-time-delivery-rate"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="budget-variance"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="resource-utilization"]')).toBeVisible();
            const chart = page.locator('[data-testid="project-timeline-chart"]');
            await (0, test_1.expect)(chart).toBeVisible();
            await chart.hover();
            await (0, test_1.expect)(page.locator('[data-testid="chart-tooltip"]')).toBeVisible();
            await page.click('[data-testid="date-range-picker"]');
            await page.fill('[data-testid="start-date-input"]', '2024-01-01');
            await page.fill('[data-testid="end-date-input"]', '2024-12-31');
            await page.click('[data-testid="apply-date-filter"]');
            await testHelpers.waitForElement('[data-testid="updated-charts"]');
            await page.click('[data-testid="export-analytics"]');
            await testHelpers.waitForElement('[data-testid="export-options"]');
            await page.click('[data-testid="export-pdf"]');
            const downloadPromise = page.waitForEvent('download');
            const download = await downloadPromise;
            (0, test_1.expect)(download.suggestedFilename()).toMatch(/analytics.*\.pdf/);
            await page.click('[data-testid="real-time-toggle"]');
            await testHelpers.waitForElement('[data-testid="real-time-indicator"]');
            await testHelpers.waitForWebSocket();
            await page.click('[data-testid="drill-down-project-1"]');
            await testHelpers.waitForElement('[data-testid="project-detail-analytics"]');
            await (0, test_1.expect)(page.locator('[data-testid="task-completion-rate"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="team-productivity-metrics"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="risk-assessment"]')).toBeVisible();
        });
        enhancedTest('should handle multi-project portfolio analysis', async ({ page, testHelpers }) => {
            await page.goto('/portfolio');
            await testHelpers.waitForElement('[data-testid="portfolio-dashboard"]');
            await (0, test_1.expect)(page.locator('[data-testid="total-portfolio-value"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="active-projects-count"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="resource-allocation-pie-chart"]')).toBeVisible();
            await page.click('[data-testid="dependency-analysis"]');
            await testHelpers.waitForElement('[data-testid="dependency-graph"]');
            await (0, test_1.expect)(page.locator('[data-testid="dependency-nodes"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="dependency-edges"]')).toBeVisible();
            await page.click('[data-testid="critical-path-analysis"]');
            await testHelpers.waitForElement('[data-testid="critical-path-results"]');
            await page.click('[data-testid="cross-project-conflicts"]');
            await testHelpers.waitForElement('[data-testid="conflict-matrix"]');
            await (0, test_1.expect)(page.locator('[data-testid="resolution-suggestions"]')).toBeVisible();
            await page.click('[data-testid="optimize-portfolio"]');
            await testHelpers.waitForElement('[data-testid="optimization-results"]');
            await (0, test_1.expect)(page.locator('[data-testid="recommended-changes"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="projected-improvements"]')).toBeVisible();
            await page.click('[data-testid="optimization-checkbox-0"]');
            await page.click('[data-testid="apply-optimizations"]');
            await testHelpers.verifyToast('Portfolio optimizations applied');
        });
    });
});
//# sourceMappingURL=phase3-project-pipeline.spec.js.map