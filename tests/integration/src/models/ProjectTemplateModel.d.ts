export const __esModule: boolean;
export class ProjectTemplateModel {
    static initialize(pool: any): void;
    static create(templateData: any): Promise<{
        templateId: any;
        name: any;
        description: any;
        category: any;
        defaultTasks: any;
        defaultMilestones: any;
        defaultBudget: any;
        defaultDuration: any;
        requiredSkills: any;
        defaultTeamSize: any;
        metadata: any;
        isActive: any;
        isBuiltIn: any;
        isPublic: any;
        version: any;
        createdById: any;
        usageCount: any;
        averageRating: number;
        customFields: any;
        createdAt: Date;
        updatedAt: Date;
    }>;
    static findById(templateId: any): Promise<{
        templateId: any;
        name: any;
        description: any;
        category: any;
        defaultTasks: any;
        defaultMilestones: any;
        defaultBudget: any;
        defaultDuration: any;
        requiredSkills: any;
        defaultTeamSize: any;
        metadata: any;
        isActive: any;
        isBuiltIn: any;
        isPublic: any;
        version: any;
        createdById: any;
        usageCount: any;
        averageRating: number;
        customFields: any;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    static search(filters: any, limit?: number, offset?: number): Promise<{
        templates: any;
        total: number;
    }>;
    static getPopular(limit?: number): Promise<any>;
    static getCategories(): Promise<any>;
    static update(templateId: any, updates: any): Promise<{
        templateId: any;
        name: any;
        description: any;
        category: any;
        defaultTasks: any;
        defaultMilestones: any;
        defaultBudget: any;
        defaultDuration: any;
        requiredSkills: any;
        defaultTeamSize: any;
        metadata: any;
        isActive: any;
        isBuiltIn: any;
        isPublic: any;
        version: any;
        createdById: any;
        usageCount: any;
        averageRating: number;
        customFields: any;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    static delete(templateId: any): Promise<boolean>;
    static incrementUsage(templateId: any): Promise<void>;
    static updateRating(templateId: any, newRating: any): Promise<{
        templateId: any;
        name: any;
        description: any;
        category: any;
        defaultTasks: any;
        defaultMilestones: any;
        defaultBudget: any;
        defaultDuration: any;
        requiredSkills: any;
        defaultTeamSize: any;
        metadata: any;
        isActive: any;
        isBuiltIn: any;
        isPublic: any;
        version: any;
        createdById: any;
        usageCount: any;
        averageRating: number;
        customFields: any;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    static mapRowToTemplate(row: any): {
        templateId: any;
        name: any;
        description: any;
        category: any;
        defaultTasks: any;
        defaultMilestones: any;
        defaultBudget: any;
        defaultDuration: any;
        requiredSkills: any;
        defaultTeamSize: any;
        metadata: any;
        isActive: any;
        isBuiltIn: any;
        isPublic: any;
        version: any;
        createdById: any;
        usageCount: any;
        averageRating: number;
        customFields: any;
        createdAt: Date;
        updatedAt: Date;
    };
    static camelToSnake(str: any): any;
    static getEstimatedProjectDuration(template: any): any;
    static getEstimatedBudget(template: any, hourlyRate?: number): any;
    static validateTemplate(template: any): string[];
}
//# sourceMappingURL=ProjectTemplateModel.d.ts.map