import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { format, addDays, startOfWeek, endOfWeek, eachDayOfInterval, isWeekend } from 'date-fns';\nimport {\n  DragDropAllocation,\n  ResourceLane,\n  AllocationConflict,\n  UndoRedoState,\n  AllocationOperation,\n  SelectionState,\n  DropValidationResult,\n  TimeSlot,\n  BulkOperationResult,\n} from '../types/allocation';\nimport { Employee, Project } from '../types/api';\nimport { apiService } from '../services/api';\nimport { toast } from '../components/ui/toast';\n\ninterface UseDragDropSchedulerProps {\n  employees: Employee[];\n  projects: Project[];\n  initialAllocations: DragDropAllocation[];\n  viewMode?: 'week' | 'month' | 'quarter';\n  selectedDate?: Date;\n  onAllocationChange?: (allocations: DragDropAllocation[]) => void;\n  onConflictDetected?: (conflicts: AllocationConflict[]) => void;\n  maxUndoOperations?: number;\n}\n\ninterface UseDragDropSchedulerReturn {\n  // State\n  allocations: DragDropAllocation[];\n  resourceLanes: ResourceLane[];\n  conflicts: AllocationConflict[];\n  timeSlots: TimeSlot[];\n  selectionState: SelectionState;\n  undoRedoState: UndoRedoState;\n  isLoading: boolean;\n  \n  // Actions\n  handleAllocationMove: (allocationId: number, targetEmployeeId: string, targetDate: string) => Promise<boolean>;\n  handleAllocationCreate: (employeeId: string[],\n    mode: 'single' | 'multiple' = 'single'\n  ) => {\n    setSelectionState({\n      selectedAllocations: new Set(allocationIds),\n      selectionMode: mode,\n    });\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setSelectionState({\n      selectedAllocations: new Set(),\n      selectionMode: 'single',\n    });\n  }, []);\n\n  const selectAll = useCallback(() => {\n    setSelectionState({\n      selectedAllocations: new Set(allocations.map(a => a.id)),\n      selectionMode: 'multiple',\n    });\n  }, [allocations]);\n\n  // Undo/Redo functionality\n  const canUndo = undoRedoState.currentIndex >= 0;\n  const canRedo = undoRedoState.currentIndex < undoRedoState.operations.length - 1;\n\n  const handleUndo = useCallback(async (): Promise<boolean> => {\n    if (!canUndo) return false;\n\n    const operation = undoRedoState.operations[undoRedoState.currentIndex];\n    // TODO: Implement undo logic based on operation type\n    console.log('Undo operation:', operation);\n    \n    setUndoRedoState(prev => ({ ...prev, currentIndex: prev.currentIndex - 1 }));\n    return true;\n  }, [undoRedoState, canUndo]);\n\n  const handleRedo = useCallback(async (): Promise<boolean> => {\n    if (!canRedo) return false;\n\n    const operation = undoRedoState.operations[undoRedoState.currentIndex + 1];\n    // TODO: Implement redo logic based on operation type\n    console.log('Redo operation:', operation);\n    \n    setUndoRedoState(prev => ({ ...prev, currentIndex: prev.currentIndex + 1 }));\n    return true;\n  }, [undoRedoState, canRedo]);\n\n  // Refresh data\n  const refreshData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const freshAllocations = await apiService.getAllocations();\n      setAllocations(freshAllocations);\n      onAllocationChange?.(freshAllocations);\n    } catch (error) {\n      console.error('Failed to refresh data:', error);\n      toast({\n        title: 'Refresh Failed',\n        description: 'Failed to refresh allocation data',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onAllocationChange]);\n\n  // Export data\n  const exportData = useCallback((format: 'json' | 'csv'): string => {\n    if (format === 'json') {\n      return JSON.stringify({\n        allocations,\n        conflicts,\n        resourceLanes,\n        exportedAt: new Date().toISOString(),\n      }, null, 2);\n    }\n    \n    // CSV export\n    const headers = ['ID', 'Employee', 'Project', 'Hours', 'Start Date', 'End Date', 'Status'];\n    const rows = allocations.map(alloc => {\n      const employee = employees.find(e => e.id === alloc.employeeId.toString());\n      const project = projects.find(p => p.id === alloc.projectId);\n      return [\n        alloc.id,\n        employee?.name || 'Unknown',\n        project?.name || 'Unknown',\n        alloc.hours,\n        alloc.startDate,\n        alloc.endDate,\n        alloc.status,\n      ];\n    });\n    \n    return [headers, ...rows].map(row => row.join(',')).join('\\n');\n  }, [allocations, conflicts, resourceLanes, employees, projects]);\n\n  return {\n    // State\n    allocations,\n    resourceLanes,\n    conflicts,\n    timeSlots,\n    selectionState,\n    undoRedoState,\n    isLoading,\n    \n    // Actions\n    handleAllocationMove,\n    handleAllocationCreate,\n    handleAllocationUpdate,\n    handleAllocationDelete,\n    handleBulkOperation,\n    \n    // Selection\n    handleSelectionChange,\n    clearSelection,\n    selectAll,\n    \n    // Undo/Redo\n    canUndo,\n    canRedo,\n    handleUndo,\n    handleRedo,\n    \n    // Validation\n    validateDrop,\n    detectConflicts,\n    \n    // Utility\n    refreshData,\n    exportData,\n  };\n};\n\nexport default useDragDropScheduler;"