import React, { useState, useEffect } from 'react';\nimport { DragDropScheduler } from '../components/allocation/DragDropScheduler';\nimport { useDragDropScheduler } from '../hooks/useDragDropScheduler';\nimport { Card } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Badge } from '../components/ui/badge';\nimport { Separator } from '../components/ui/separator';\nimport { \n  Calendar, \n  Users, \n  Briefcase, \n  AlertTriangle,\n  Download,\n  Upload,\n  RotateCcw,\n  Settings,\n  Zap\n} from 'lucide-react';\nimport { Employee, Project } from '../types/api';\nimport { DragDropAllocation, AllocationConflict } from '../types/allocation';\nimport { apiService } from '../services/api';\nimport { toast } from '../components/ui/toast';\n\n// Mock data for demonstration\nconst mockEmployees: Employee[] = [\n  {\n    id: '1',\n    name: 'Alice Johnson',\n    firstName: 'Alice',\n    lastName: 'Johnson',\n    email: 'alice@company.com',\n    position: 'Senior Developer',\n    role: 'Senior Developer',\n    department: 'Engineering',\n    departmentId: 'eng-1',\n    salary: 120000,\n    skills: ['React', 'TypeScript', 'Node.js', 'GraphQL'],\n    capacity: 40,\n    status: 'active',\n  },\n  {\n    id: '2',\n    name: 'Bob Smith',\n    firstName: 'Bob',\n    lastName: 'Smith',\n    email: 'bob@company.com',\n    position: 'Full-Stack Developer',\n    role: 'Full-Stack Developer',\n    department: 'Engineering',\n    departmentId: 'eng-1',\n    salary: 100000,\n    skills: ['Vue.js', 'Python', 'PostgreSQL', 'Docker'],\n    capacity: 40,\n    status: 'active',\n  },\n  {\n    id: '3',\n    name: 'Carol Wilson',\n    firstName: 'Carol',\n    lastName: 'Wilson',\n    email: 'carol@company.com',\n    position: 'UI/UX Designer',\n    role: 'UI/UX Designer',\n    department: 'Design',\n    departmentId: 'des-1',\n    salary: 90000,\n    skills: ['Figma', 'Sketch', 'Adobe XD', 'User Research'],\n    capacity: 35,\n    status: 'active',\n  },\n  {\n    id: '4',\n    name: 'David Brown',\n    firstName: 'David',\n    lastName: 'Brown',\n    email: 'david@company.com',\n    position: 'DevOps Engineer',\n    role: 'DevOps Engineer',\n    department: 'Engineering',\n    departmentId: 'eng-1',\n    salary: 115000,\n    skills: ['AWS', 'Kubernetes', 'Terraform', 'Jenkins'],\n    capacity: 40,\n    status: 'active',\n  },\n];\n\nconst mockProjects: Project[] = [\n  {\n    id: 1,\n    name: 'E-commerce Platform v2.0',\n    description: 'Complete overhaul of the existing e-commerce platform',\n    status: 'active',\n    startDate: '2024-01-01',\n    endDate: '2024-06-30',\n    budget: 250000,\n    priority: 'high',\n    clientName: 'TechCorp Inc.',\n    estimatedHours: 2000,\n    actualHours: 800,\n  },\n  {\n    id: 2,\n    name: 'Mobile App Development',\n    description: 'Cross-platform mobile app using React Native',\n    status: 'active',\n    startDate: '2024-02-01',\n    endDate: '2024-08-31',\n    budget: 180000,\n    priority: 'medium',\n    clientName: 'StartupXYZ',\n    estimatedHours: 1500,\n    actualHours: 300,\n  },\n  {\n    id: 3,\n    name: 'Data Analytics Dashboard',\n    description: 'Real-time analytics dashboard for business intelligence',\n    status: 'planning',\n    startDate: '2024-03-01',\n    endDate: '2024-09-30',\n    budget: 150000,\n    priority: 'medium',\n    clientName: 'DataCorp',\n    estimatedHours: 1200,\n    actualHours: 0,\n  },\n  {\n    id: 4,\n    name: 'Security Audit & Improvements',\n    description: 'Comprehensive security review and implementation',\n    status: 'active',\n    startDate: '2024-01-15',\n    endDate: '2024-04-15',\n    budget: 80000,\n    priority: 'critical',\n    clientName: 'SecureTech',\n    estimatedHours: 600,\n    actualHours: 150,\n  },\n];\n\nconst mockAllocations: DragDropAllocation[] = [\n  {\n    id: 1,\n    employeeId: 1,\n    projectId: 1,\n    hours: 32,\n    date: '2024-01-15',\n    startDate: '2024-01-15',\n    endDate: '2024-01-19',\n    duration: 5,\n    status: 'active',\n    position: { x: 0, y: 0 },\n    dimensions: { width: 200, height: 60 },\n    notes: 'Working on frontend components',\n  },\n  {\n    id: 2,\n    employeeId: 1,\n    projectId: 4,\n    hours: 16,\n    date: '2024-01-15',\n    startDate: '2024-01-15',\n    endDate: '2024-01-17',\n    duration: 3,\n    status: 'active',\n    position: { x: 0, y: 0 },\n    dimensions: { width: 200, height: 60 },\n    notes: 'Security code review',\n  },\n  {\n    id: 3,\n    employeeId: 2,\n    projectId: 2,\n    hours: 40,\n    date: '2024-01-15',\n    startDate: '2024-01-15',\n    endDate: '2024-01-19',\n    duration: 5,\n    status: 'active',\n    position: { x: 0, y: 0 },\n    dimensions: { width: 200, height: 60 },\n    notes: 'Backend API development',\n  },\n  {\n    id: 4,\n    employeeId: 3,\n    projectId: 1,\n    hours: 28,\n    date: '2024-01-15',\n    startDate: '2024-01-15',\n    endDate: '2024-01-18',\n    duration: 4,\n    status: 'active',\n    position: { x: 0, y: 0 },\n    dimensions: { width: 200, height: 60 },\n    notes: 'UI/UX design for checkout flow',\n  },\n  {\n    id: 5,\n    employeeId: 4,\n    projectId: 4,\n    hours: 35,\n    date: '2024-01-15',\n    startDate: '2024-01-15',\n    endDate: '2024-01-19',\n    duration: 5,\n    status: 'active',\n    position: { x: 0, y: 0 },\n    dimensions: { width: 200, height: 60 },\n    notes: 'Infrastructure security improvements',\n  },\n];\n\nconst DragDropSchedulerDemo: React.FC = () => {\n  const [employees, setEmployees] = useState<Employee[]>(mockEmployees);\n  const [projects, setProjects] = useState<Project[]>(mockProjects);\n  const [viewMode, setViewMode] = useState<'week' | 'month' | 'quarter'>('week');\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [showDemo, setShowDemo] = useState(true);\n  \n  const {\n    allocations,\n    resourceLanes,\n    conflicts,\n    timeSlots,\n    selectionState,\n    isLoading,\n    handleAllocationMove,\n    handleAllocationCreate,\n    handleAllocationUpdate,\n    handleAllocationDelete,\n    handleSelectionChange,\n    clearSelection,\n    selectAll,\n    canUndo,\n    canRedo,\n    handleUndo,\n    handleRedo,\n    refreshData,\n    exportData,\n  } = useDragDropScheduler({\n    employees,\n    projects,\n    initialAllocations: mockAllocations,\n    viewMode,\n    selectedDate,\n    onAllocationChange: (newAllocations) => {\n      console.log('Allocations changed:', newAllocations);\n    },\n    onConflictDetected: (newConflicts) => {\n      console.log('Conflicts detected:', newConflicts);\n    },\n  });\n\n  // Load real data if available\n  const loadRealData = async () => {\n    try {\n      const [employeesData, projectsData, allocationsData] = await Promise.all([\n        apiService.getEmployees(),\n        apiService.getProjects(),\n        apiService.getAllocations(),\n      ]);\n      \n      setEmployees(employeesData);\n      setProjects(projectsData);\n      setShowDemo(false);\n      \n      toast({\n        title: 'Data Loaded',\n        description: 'Successfully loaded real data from the API',\n      });\n    } catch (error) {\n      console.log('Using demo data - API not available');\n      toast({\n        title: 'Using Demo Data',\n        description: 'API not available, showing demo data instead',\n        variant: 'default',\n      });\n    }\n  };\n\n  // Initialize with real or demo data\n  useEffect(() => {\n    loadRealData();\n  }, []);\n\n  const handleExport = (format: 'json' | 'csv') => {\n    const data = exportData(format);\n    const blob = new Blob([data], { \n      type: format === 'json' ? 'application/json' : 'text/csv' \n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `resource-allocation-${Date.now()}.${format}`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({\n      title: 'Export Successful',\n      description: `Data exported as ${format.toUpperCase()}`,\n    });\n  };\n\n  const generateDemoConflicts = (): AllocationConflict[] => {\n    return [\n      {\n        id: 'demo-conflict-1',\n        type: 'capacity_exceeded',\n        message: 'Alice Johnson is over-allocated (48h/40h capacity)',\n        severity: 'error',\n        affectedAllocations: [1, 2],\n      },\n      {\n        id: 'demo-conflict-2',\n        type: 'overlap',\n        message: 'Overlapping project timelines for Bob Smith',\n        severity: 'warning',\n        affectedAllocations: [3],\n      },\n    ];\n  };\n\n  const statsData = {\n    totalEmployees: employees.length,\n    totalProjects: projects.length,\n    totalAllocations: allocations.length,\n    totalConflicts: conflicts.length,\n    averageUtilization: Math.round(\n      resourceLanes.reduce((sum, lane) => sum + (lane.utilization / lane.capacity) * 100, 0) / resourceLanes.length\n    ),\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center space-x-2\">\n                <Zap className=\"h-8 w-8 text-primary\" />\n                <span>Drag & Drop Resource Scheduler</span>\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                Interactive resource allocation with visual conflict detection\n              </p>\n            </div>\n            \n            {showDemo && (\n              <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\n                Demo Mode\n              </Badge>\n            )}\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5 text-blue-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{statsData.totalEmployees}</div>\n                  <div className=\"text-sm text-gray-500\">Employees</div>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Briefcase className=\"h-5 w-5 text-green-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{statsData.totalProjects}</div>\n                  <div className=\"text-sm text-gray-500\">Projects</div>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-5 w-5 text-purple-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{statsData.totalAllocations}</div>\n                  <div className=\"text-sm text-gray-500\">Allocations</div>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <AlertTriangle className={`h-5 w-5 ${\n                  statsData.totalConflicts > 0 ? 'text-red-500' : 'text-gray-400'\n                }`} />\n                <div>\n                  <div className=\"text-2xl font-bold\">{statsData.totalConflicts}</div>\n                  <div className=\"text-sm text-gray-500\">Conflicts</div>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Settings className=\"h-5 w-5 text-orange-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{statsData.averageUtilization}%</div>\n                  <div className=\"text-sm text-gray-500\">Avg. Utilization</div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        {/* Action bar */}\n        <div className=\"bg-white rounded-lg shadow-sm p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={handleUndo}\n                  disabled={!canUndo || isLoading}\n                >\n                  <RotateCcw className=\"h-4 w-4 mr-1\" />\n                  Undo\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={handleRedo}\n                  disabled={!canRedo || isLoading}\n                >\n                  Redo\n                </Button>\n              </div>\n              \n              <Separator orientation=\"vertical\" className=\"h-6\" />\n              \n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={clearSelection}\n                  disabled={selectionState.selectedAllocations.size === 0}\n                >\n                  Clear Selection\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={selectAll}\n                  disabled={allocations.length === 0}\n                >\n                  Select All\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => handleExport('csv')}>\n                <Download className=\"h-4 w-4 mr-1\" />\n                Export CSV\n              </Button>\n              \n              <Button variant=\"outline\" size=\"sm\" onClick={() => handleExport('json')}>\n                <Download className=\"h-4 w-4 mr-1\" />\n                Export JSON\n              </Button>\n              \n              <Button variant=\"outline\" size=\"sm\" onClick={refreshData}>\n                <Upload className=\"h-4 w-4 mr-1\" />\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Selection info */}\n        {selectionState.selectedAllocations.size > 0 && (\n          <Card className=\"p-4 bg-blue-50 border-blue-200\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-sm text-blue-700\">\n                <strong>{selectionState.selectedAllocations.size}</strong> allocations selected\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button size=\"sm\" variant=\"outline\" onClick={clearSelection}>\n                  Clear\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => {\n                    // Handle bulk delete\n                    Array.from(selectionState.selectedAllocations).forEach(id => {\n                      handleAllocationDelete(id);\n                    });\n                    clearSelection();\n                  }}\n                >\n                  Delete Selected\n                </Button>\n              </div>\n            </div>\n          </Card>\n        )}\n\n        {/* Main scheduler */}\n        <Card className=\"p-6 min-h-96\">\n          <DragDropScheduler\n            employees={employees}\n            projects={projects}\n            allocations={allocations}\n            onAllocationChange={(newAllocations) => {\n              console.log('Scheduler allocation change:', newAllocations);\n            }}\n            onConflictDetected={(newConflicts) => {\n              console.log('Scheduler conflict detection:', newConflicts);\n            }}\n            viewMode={viewMode}\n            selectedDate={selectedDate}\n            readOnly={false}\n          />\n        </Card>\n\n        {/* Features showcase */}\n        <Card className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">✨ Features Showcase</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">🖱️ Drag & Drop</h3>\n              <p className=\"text-sm text-gray-600\">\n                Drag allocation cards between employees and time periods with visual feedback.\n              </p>\n            </div>\n            \n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">⚠️ Conflict Detection</h3>\n              <p className=\"text-sm text-gray-600\">\n                Real-time detection of over-allocations, overlaps, and skill mismatches.\n              </p>\n            </div>\n            \n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">🔄 Undo/Redo</h3>\n              <p className=\"text-sm text-gray-600\">\n                Complete operation history with undo/redo support for all changes.\n              </p>\n            </div>\n            \n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">📊 Capacity Tracking</h3>\n              <p className=\"text-sm text-gray-600\">\n                Visual capacity indicators with utilization percentages and warnings.\n              </p>\n            </div>\n            \n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">🎯 Multi-Selection</h3>\n              <p className=\"text-sm text-gray-600\">\n                Select multiple allocations for bulk operations and management.\n              </p>\n            </div>\n            \n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">📅 Flexible Views</h3>\n              <p className=\"text-sm text-gray-600\">\n                Switch between week, month, and quarter views for different planning horizons.\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        {/* Instructions */}\n        <Card className=\"p-6 bg-gray-50\">\n          <h2 className=\"text-xl font-semibold mb-4\">🚀 How to Use</h2>\n          <div className=\"space-y-2 text-sm text-gray-600\">\n            <p>• <strong>Drag allocations</strong>: Click and drag allocation cards between employees</p>\n            <p>• <strong>Select multiple</strong>: Hold Ctrl/Cmd while clicking to select multiple allocations</p>\n            <p>• <strong>Create allocations</strong>: Click \"Add Allocation\" button on resource lanes</p>\n            <p>• <strong>Edit details</strong>: Click the menu (⋮) on allocation cards for options</p>\n            <p>• <strong>View conflicts</strong>: Red/yellow indicators show over-allocations and conflicts</p>\n            <p>• <strong>Export data</strong>: Use the export buttons to download allocation data</p>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default DragDropSchedulerDemo;"