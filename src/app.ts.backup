import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import { employeeRoutes } from './routes/employee.routes';
import { departmentRoutes } from './routes/department.routes';
import { skillRoutes } from './routes/skill.routes';
// Temporarily disable problematic routes to focus on core employee system
// import { availabilityRoutes } from './routes/availabilityRoutes';
// import { exportRoutes } from './routes/exportRoutes';
import analyticsRoutes from './routes/analytics.routes';
import { errorHandler } from './middleware/error-handler';
import { authMiddleware } from './middleware/auth.middleware';
import { requestLogger } from './middleware/request-logger';
import { serviceInjectionMiddleware, serviceMonitoringMiddleware } from './middleware/service-injection.middleware';
// Validation middleware imported in individual routes

const app = express();

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000', 'http://localhost:3002'],
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: {
    error: 'Too many requests from this IP, please try again later.'
  }
});
app.use('/api/', limiter);

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(compression());

// Service injection middleware
app.use(serviceInjectionMiddleware);

// Performance monitoring middleware
app.use(serviceMonitoringMiddleware);

// Logging middleware
app.use(requestLogger);

// Health check endpoint
app.get('/health', (_req, res) => {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// API documentation endpoint
app.get('/api', (_req, res) => {
  res.json({
    name: 'Employee Management API',
    version: '1.0.0',
    description: 'RESTful API for employee management system',
    endpoints: {
      employees: '/api/employees',
      departments: '/api/departments',
      skills: '/api/skills',
      availability: '/api/availability',
      export: '/api/export',
      integration: '/api/integration',
      analytics: '/api/analytics'
    },
    documentation: '/api/docs'
  });
});

// Apply authentication middleware to protected routes
app.use('/api/employees', authMiddleware);
app.use('/api/departments', authMiddleware);
app.use('/api/skills', authMiddleware);
app.use('/api/analytics', authMiddleware);
// Note: availability and export routes handle their own auth if needed

// API routes
app.use('/api/employees', employeeRoutes);
app.use('/api/departments', departmentRoutes);
app.use('/api/skills', skillRoutes);
// Temporarily disable problematic routes
// app.use('/api/availability', availabilityRoutes);
// app.use('/api/export', exportRoutes);
app.use('/api/analytics', analyticsRoutes);
// app.use('/api/integration', exportRoutes); // Export routes handle integration endpoints

// Handle 404 routes
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Route not found',
    message: `The requested route ${req.originalUrl} does not exist`,
    availableRoutes: ['/api/employees', '/api/departments', '/api/skills', '/api/availability', '/api/export', '/api/analytics', '/api/integration']
  });
});

// Global error handler
app.use(errorHandler);

export { app };