export const __esModule: boolean;
export class AvailabilityController {
    getServices(req: any): void;
    availabilityService: any;
    db: any;
    cacheService: any;
    wsService: any;
    getPatterns(req: any, res: any): Promise<any>;
    getPattern(req: any, res: any): Promise<any>;
    createPattern(req: any, res: any): Promise<any>;
    updatePattern(req: any, res: any): Promise<any>;
    deletePattern(req: any, res: any): Promise<any>;
    activatePattern(req: any, res: any): Promise<any>;
    clonePattern(req: any, res: any): Promise<any>;
    getExceptions(req: any, res: any): Promise<any>;
    getException(req: any, res: any): Promise<any>;
    createException(req: any, res: any): Promise<any>;
    updateException(req: any, res: any): Promise<any>;
    deleteException(req: any, res: any): Promise<any>;
    approveException(req: any, res: any): Promise<any>;
    rejectException(req: any, res: any): Promise<any>;
    getHolidays(req: any, res: any): Promise<any>;
    getHoliday(req: any, res: any): Promise<any>;
    createHoliday(req: any, res: any): Promise<any>;
    updateHoliday(req: any, res: any): Promise<any>;
    deleteHoliday(req: any, res: any): Promise<any>;
    bulkImportHolidays(req: any, res: any): Promise<any>;
    getEffectiveAvailability(req: any, res: any): Promise<any>;
    getAvailabilityRange(req: any, res: any): Promise<any>;
    getDepartmentAvailability(req: any, res: any): Promise<any>;
    getTeamAvailability(req: any, res: any): Promise<any>;
    bulkCreatePatterns(req: any, res: any): Promise<any>;
    bulkUpdatePatterns(req: any, res: any): Promise<any>;
    copyWeekPattern(req: any, res: any): Promise<any>;
    getUtilizationAnalytics(req: any, res: any): Promise<any>;
    getCoverageAnalysis(req: any, res: any): Promise<any>;
    getAvailabilityForecast(req: any, res: any): Promise<any>;
    exportAvailability(req: any, res: any): Promise<any>;
    configureAlerts(req: any, res: any): Promise<any>;
    getPendingAlerts(req: any, res: any): Promise<any>;
    aggregateByGranularity(data: any, granularity: any): any;
    groupByWeek(dataPoints: any): any[];
    groupByMonth(dataPoints: any): any[];
    calculateAverageUtilization(data: any): number;
    calculatePeakUtilization(data: any): number;
    countUnderutilizedDays(data: any): number;
    countOverutilizedDays(data: any): number;
}
//# sourceMappingURL=availability.controller.d.ts.map